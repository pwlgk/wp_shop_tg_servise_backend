# app/bot/handlers/admin_actions.py
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message
from fastapi import BackgroundTasks
from sqlalchemy import Column, String
from app.bot.filters.admin import IsAdminFilter
from app.clients.woocommerce import wc_client
from app.core.redis import redis_client
from app.db.session import SessionLocal
from app.models.broadcast import Broadcast
from app.bot.services.broadcast import process_broadcast
import asyncio
from app.dependencies import get_db_context # <-- –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç!
from aiogram.exceptions import TelegramBadRequest
from app.bot.callbacks.admin import UserListCallback
from app.bot.services.admin_panel import generate_user_list_message
from aiogram.fsm.context import FSMContext
from app.crud import user as crud_user
from app.bot.services import admin_panel as admin_panel_service
from aiogram.types import CallbackQuery
from aiogram import F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.dependencies import get_db
from app.models.user import User

import logging

logger = logging.getLogger(__name__)

admin_actions_router = Router()
admin_actions_router.message.filter(IsAdminFilter()) # –ó–∞—â–∏—â–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ

@admin_actions_router.message(Command("promo_welcome"))
async def set_welcome_bonus(message: Message):
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –∞–∫—Ü–∏–µ–π '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å'.
    –ü—Ä–∏–º–µ—Ä—ã: /promo_welcome 300
             /promo_welcome on
             /promo_welcome off
    """
    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: `/promo_welcome 300` –∏–ª–∏ `/promo_welcome on`")
        return

    value = args[1].lower()
    payload = {}

    if value.isdigit():
        payload['welcome_bonus_amount'] = int(value)
    elif value in ['on', 'true', '1']:
        payload['is_welcome_bonus_active'] = True
    elif value in ['off', 'false', '0']:
        payload['is_welcome_bonus_active'] = False
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ, 'on' –∏–ª–∏ 'off'.")
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞—à –Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤ WP
        await wc_client.async_client.post("headless-api/v1/settings", json=payload)
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–µ—à –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ Redis
        await redis_client.delete("shop_settings")
        await message.answer(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: `{list(payload.keys())[0]}` = `{list(payload.values())[0]}`")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")


@admin_actions_router.message(Command("send_broadcast"))
async def create_broadcast_from_reply(message: Message):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É.
    –ù—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –æ—Ç–≤–µ—Ç (reply) –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å—ã–ª–∞—Ç—å—Å—è.
    """
    if not message.reply_to_message:
        await message.answer("‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å.")
        return
        
    args = message.text.split()
    target_level = "all"
    if len(args) > 1 and args[1].lower() in ["bronze", "silver", "gold", "all"]:
        target_level = args[1].lower()

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –õ–û–ì–ò–ö–ò: –°–û–ó–î–ê–ï–ú –ó–ê–î–ê–ß–£ –í –ë–î –í –û–¢–î–ï–õ–¨–ù–û–ô –§–£–ù–ö–¶–ò–ò ---
    
    original_msg = message.reply_to_message
    broadcast_text = ""
    photo_file_id = None
    
    if original_msg.text:
        broadcast_text = original_msg.html_text
    elif original_msg.photo:
        photo_file_id = original_msg.photo[-1].file_id
        broadcast_text = original_msg.caption or ""
    else:
        await message.answer("‚ùóÔ∏è–î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é.")
        return

    # –í—ã–∑—ã–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
    broadcast_id = create_broadcast_in_db(
        message_text=broadcast_text,
        target_level=target_level,
        photo_file_id=photo_file_id
    )
    
    if broadcast_id:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        asyncio.create_task(process_broadcast(broadcast_id=broadcast_id))
        await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã '{target_level}'.\nID –∑–∞–¥–∞—á–∏: {broadcast_id}")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.")

# --- –ù–û–í–ê–Ø –°–ò–ù–•–†–û–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–î ---
def create_broadcast_in_db(message_text: str, target_level: str, photo_file_id: str | None) -> int | None:
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –æ —Ä–∞—Å—Å—ã–ª–∫–µ –≤ –ë–î –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
    db = SessionLocal()
    try:
        # –í–∞–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ photo_file_id –≤ –º–æ–¥–µ–ª—å Broadcast –∏ —Å–¥–µ–ª–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é
        new_broadcast = Broadcast(
            message_text=message_text,
            target_level=target_level,
            photo_file_id=photo_file_id
        )
        db.add(new_broadcast)
        db.commit()
        db.refresh(new_broadcast)
        return new_broadcast.id
    except Exception as e:
        logger.error(f"Error creating broadcast in DB: {e}")
        db.rollback()
        return None
    finally:
        db.close()


@admin_actions_router.message(Command("stats"))
async def get_stats_handler(message: Message):
    """–í—ã–≤–æ–¥–∏—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    with get_db_context() as db:
        try:
            total_users = crud_user.count_all_users(db)
            bronze_count = crud_user.count_users_by_level(db, "bronze")
            silver_count = crud_user.count_users_by_level(db, "silver")
            gold_count = crud_user.count_users_by_level(db, "gold")
            blocked_bot_count = crud_user.count_users_with_bot_blocked(db)
            
            stats_text = (
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:</b>\n\n"
                f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\n\n"
                f"<b>–ü–æ —É—Ä–æ–≤–Ω—è–º:</b>\n"
                f"ü•â –ë—Ä–æ–Ω–∑–∞: {bronze_count}\n"
                f"ü•à –°–µ—Ä–µ–±—Ä–æ: {silver_count}\n"
                f"ü•á –ó–æ–ª–æ—Ç–æ: {gold_count}\n\n"
                f"ü§ñ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞:</b> {blocked_bot_count}"
            )
            await message.answer(stats_text)
        finally:
            db.close()

@admin_actions_router.message(Command("find_user"))
async def find_user_handler(message: Message):
    query = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else None
    if not query:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID, Telegram ID –∏–ª–∏ username –¥–ª—è –ø–æ–∏—Å–∫–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: `/find_user 12345678`")
        return
        
    with get_db_context() as db:
        try:
            # 1. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –Ω–∞—à–µ–π –±—ã—Å—Ç—Ä–æ–π –ë–î –ø–æ ID –∏ username
            users = crud_user.find_users(db, query)
            
            # 2. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –≤ "–º–µ–¥–ª–µ–Ω–Ω–æ–º" WooCommerce –ø–æ –§–ò–û
            if not users:
                logger.info(f"No users found in local DB for '{query}'. Searching in WooCommerce...")
                try:
                    # API WC –∏—â–µ—Ç –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –≤ –∏–º–µ–Ω–∏, —Ñ–∞–º–∏–ª–∏–∏, email
                    wc_users_response = await wc_client.get("wc/v3/customers", params={"search": query})
                    wc_users_data = wc_users_response.json()
                    
                    if wc_users_data:
                        # –ü–æ–ª—É—á–∞–µ–º telegram_id –∏–∑ email'–æ–≤ (–Ω–∞—à —Ö–∞–∫)
                        telegram_ids = [int(u['email'].split('@')[0]) for u in wc_users_data if '@telegram.user' in u['email']]
                        if telegram_ids:
                            # –ù–∞—Ö–æ–¥–∏–º —ç—Ç–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –Ω–∞—à–µ–π –ë–î
                            users = db.query(User).filter(User.telegram_id.in_(telegram_ids)).all()
                except Exception as e:
                    logger.error(f"Error searching users in WooCommerce: {e}")

            if not users:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            else:
                await message.answer(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
                for user in users:
                    card_text, builder = await admin_panel_service.format_user_card(user)
                    await message.answer(card_text, reply_markup=builder.as_markup())
        finally:
            db.close()

# --- –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º ---

@admin_actions_router.callback_query(F.data.startswith("user_block_confirm:"))
async def confirm_block_user(callback: CallbackQuery):
    """–®–∞–≥ 1: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É."""
    try:
        user_id = int(callback.data.split(":")[1])
    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)
        return

    builder = InlineKeyboardBuilder()
    builder.button(text="üî• –î–∞, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"user_block_execute:{user_id}")
    builder.button(text="–û—Ç–º–µ–Ω–∞", callback_data=f"user_action_cancel:{user_id}")
    
    await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ <b>–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID <code>{user_id}</code>?",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@admin_actions_router.callback_query(F.data.startswith("user_block_execute:"))
async def execute_block_user(callback: CallbackQuery):
    """–®–∞–≥ 2: –í—ã–ø–æ–ª–Ω—è–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É."""
    try:
        user_id = int(callback.data.split(":")[1])
    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)
        return

    with get_db_context() as db:
        try:
            user = crud_user.get_user_by_id(db, user_id)
            if user:
                user.is_blocked = True
                db.commit()
                db.refresh(user)
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
                card_text, builder = await admin_panel_service.format_user_card(user)
                try:
                    await callback.message.edit_text(card_text, reply_markup=builder.as_markup())
                except TelegramBadRequest as e:
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "message is not modified", –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                    if "message is not modified" not in str(e):
                        logger.error(f"Error editing message: {e}")
                # -------------------------
                
                await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
            else:
                await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        finally:
            db.close()

# --- –•–ï–ù–î–õ–ï–†–´ –î–õ–Ø –ü–†–û–¶–ï–°–°–ê –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ò ---

@admin_actions_router.callback_query(F.data.startswith("user_unblock_confirm:"))
async def confirm_unblock_user(callback: CallbackQuery):
    """–®–∞–≥ 1: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ)."""
    try:
        user_id = int(callback.data.split(":")[1])
    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)
        return
        
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"user_unblock_execute:{user_id}")
    builder.button(text="–û—Ç–º–µ–Ω–∞", callback_data=f"user_action_cancel:{user_id}")
    await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ <b>—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID <code>{user_id}</code>?",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@admin_actions_router.callback_query(F.data.startswith("user_unblock_execute:"))
async def execute_unblock_user(callback: CallbackQuery):
    """–®–∞–≥ 2: –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É."""
    try:
        user_id = int(callback.data.split(":")[1])
    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)
        return

    with get_db_context() as db:
        try:
            user = crud_user.get_user_by_id(db, user_id)
            if user:
                user.is_blocked = False
                db.commit()
                db.refresh(user)
                card_text, builder = await admin_panel_service.format_user_card(user)
                await callback.message.edit_text(card_text, reply_markup=builder.as_markup())
                await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
            else:
                await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        finally:
            db.close()

# --- –•–ï–ù–î–õ–ï–† –î–õ–Ø –û–¢–ú–ï–ù–´ –î–ï–ô–°–¢–í–ò–Ø ---

@admin_actions_router.callback_query(F.data.startswith("user_action_cancel:"))
async def cancel_user_action(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        user_id = int(callback.data.split(":")[1])
    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)
        return

    with get_db_context() as db:
        try:
            user = crud_user.get_user_by_id(db, user_id)
            if user:
                card_text, builder = await admin_panel_service.format_user_card(user)
                await callback.message.edit_text(card_text, reply_markup=builder.as_markup())
                await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            else:
                await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        finally:
            db.close()


@admin_actions_router.message(Command("users"))
async def list_users_handler(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    with get_db_context() as db:
        try:
            text, markup = await generate_user_list_message(db)
            await message.answer(text, reply_markup=markup)
        finally:
            db.close()

@admin_actions_router.callback_query(UserListCallback.filter(F.action == "nav"))
async def navigate_user_list_handler(callback: CallbackQuery, callback_data: UserListCallback):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º."""
    with get_db_context() as db:
        try:
            text, markup = await generate_user_list_message(
                db, 
                page=callback_data.page, 
                level=callback_data.level, 
                bot_blocked=callback_data.bot_blocked
            )
            
            # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
            try:
                await callback.message.edit_text(text, reply_markup=markup)
            except TelegramBadRequest as e:
                if "message is not modified" not in str(e):
                    logger.error(f"Error editing user list message: {e}")
            # -------------------------
            
        except Exception as e:
            logger.error(f"Error in user list navigation: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)
            
    await callback.answer() # –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã "—á–∞—Å–∏–∫–∏" –∏—Å—á–µ–∑–ª–∏

@admin_actions_router.callback_query(UserListCallback.filter(F.action.in_(["f_level", "f_block"])))
async def filter_user_list_handler(callback: CallbackQuery, callback_data: UserListCallback):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
    with get_db_context() as db:
        try:
            # –ü—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
            text, markup = await generate_user_list_message(
                db,
                page=1, # –ü—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∏–ª—å—Ç—Ä–∞ –≤—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ 1-—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                level=callback_data.level,
                bot_blocked=callback_data.bot_blocked
            )

            # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
            try:
                await callback.message.edit_text(text, reply_markup=markup)
            except TelegramBadRequest as e:
                if "message is not modified" not in str(e):
                    logger.error(f"Error editing user list message: {e}")
            # -------------------------

        except Exception as e:
            logger.error(f"Error in user list filtering: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)
            
    await callback.answer()












@admin_actions_router.message(F.text, ~Command(commands=["start", "cancel", "help"]))
async def admin_fallback_handler(message: Message, state: FSMContext):
    """
    –õ–æ–≤–∏—Ç –ª—é–±—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–¥–æ—à–ª–∏
    –ø–æ–¥ –¥—Ä—É–≥–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –∏ –µ—Å–ª–∏ –∞–¥–º–∏–Ω –ù–ï –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM.
    """
    current_state = await state.get_state()
    if current_state is not None:
        return

    if message.chat.type == "private":
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –†–ê–ó–ú–ï–¢–ö–ê ---
        help_text = (
            "ü§ñ <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            "<code>/stats</code> - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n"
            "<b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n"
            "<code>/find_user &lt;ID/TG_ID/username&gt;</code>\n\n"
            "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ü–∏—è–º–∏:</b>\n"
            "<code>/promo_welcome &lt;—Å—É–º–º–∞&gt;</code>\n"
            "<code>/promo_welcome on|off</code>\n\n"
            "<b>–†–∞—Å—Å—ã–ª–∫–∏ (–≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø–µ):</b>\n"
            "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π:\n"
            "<code>/send_broadcast &lt;all|bronze|silver|gold&gt;</code>"
        )
        # ----------------------------
        await message.answer(help_text, parse_mode="HTML")


