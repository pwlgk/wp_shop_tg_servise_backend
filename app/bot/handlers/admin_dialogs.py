# app/bot/handlers/admin_dialogs.py
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, ContentType
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from app.bot.filters.admin import IsAdminFilter
from app.bot.core import bot
from app.bot.services import notification as notification_service # –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
from app.dependencies import get_db
from app.crud import user as crud_user
from app.clients.woocommerce import wc_client
from app.dependencies import get_db_context # <-- –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç!
import logging

logger = logging.getLogger(__name__)

admin_dialog_router = Router()
# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–æ –≤—Å–µ–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º –≤ —ç—Ç–æ–º —Ä–æ—É—Ç–µ—Ä–µ
admin_dialog_router.message.filter(IsAdminFilter())
admin_dialog_router.callback_query.filter(IsAdminFilter())

# –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞ (FSM)
class ReplyState(StatesGroup):
    waiting_for_reply = State()

@admin_dialog_router.callback_query(F.data.startswith("reply_to:"))
async def start_reply_handler(callback: CallbackQuery, state: FSMContext):
    """–õ–æ–≤–∏—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ç–≤–µ—Ç–∏—Ç—å –æ—Ç –±–æ—Ç–∞'."""
    customer_id_str = callback.data.split(":")[1]
    with get_db_context() as db:
        try:
            customer_id = int(customer_id_str)
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—à–µ–π –ë–î, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ wordpress_id
            customer_local = crud_user.get_user_by_telegram_id(db, customer_id)
            
            customer_name = f"ID {customer_id}" # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            if customer_local:
                try:
                    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ WooCommerce ---
                    wc_customer_response = await wc_client.get(f"wc/v3/customers/{customer_local.wordpress_id}")
                    wc_customer_data = wc_customer_response.json()
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –∏–º—è
                    first_name = wc_customer_data.get("first_name", "")
                    last_name = wc_customer_data.get("last_name", "")
                    full_name = f"{first_name} {last_name}".strip()
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å, –∏–Ω–∞—á–µ username, –∏–Ω–∞—á–µ ID
                    customer_name = full_name or customer_local.username or f"ID {customer_id}"
                    
                except Exception as e:
                    logger.error(f"Could not fetch customer name from WooCommerce: {e}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ WP, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ, —á—Ç–æ –µ—Å—Ç—å —É –Ω–∞—Å
                    customer_name = customer_local.username or f"ID {customer_id}"

            await state.update_data(customer_id=customer_id, customer_name=customer_name)
            await state.set_state(ReplyState.waiting_for_reply)
            
            await callback.message.reply(
                f"üìù –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è <b>{customer_name}</b> (<code>{customer_id}</code>).\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
                parse_mode="HTML"
            )
        except (ValueError, IndexError):
            await callback.message.reply("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        finally:
            db.close()
    
    await callback.answer()

@admin_dialog_router.message(ReplyState.waiting_for_reply, Command("cancel"))
async def cancel_reply_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –¥–∏–∞–ª–æ–≥–∞."""
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@admin_dialog_router.message(ReplyState.waiting_for_reply, F.text)
async def send_text_reply_handler(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –¢–ï–ö–°–¢–û–í–´–ô –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –∫–ª–∏–µ–Ω—Ç—É."""
    data = await state.get_data()
    customer_id = data.get("customer_id")
    customer_name = data.get("customer_name")
    
    if not customer_id:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∫–ª–∏–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    with get_db_context() as db:
        try:
            user_to_reply = crud_user.get_user_by_telegram_id(db, customer_id)
            if not user_to_reply:
                await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {customer_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—à–µ–π –±–∞–∑–µ.")
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏
                success = await notification_service._send_message(db, user_to_reply, f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:</b>\n\n{message.html_text}")
                if success:
                    await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è <b>{customer_name}</b>.", parse_mode="HTML")
                else:
                    await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {customer_name}. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
        finally:
            db.close()
    
    await state.clear()


# --- –ù–û–í–´–ô –•–ï–ù–î–õ–ï–† –î–õ–Ø –§–û–¢–û ---
@admin_dialog_router.message(ReplyState.waiting_for_reply, F.photo)
async def send_photo_reply_handler(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –§–û–¢–û –æ—Ç –∞–¥–º–∏–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –∫–ª–∏–µ–Ω—Ç—É."""
    data = await state.get_data()
    customer_id = data.get("customer_id")
    customer_name = data.get("customer_name")

    if not customer_id:
        # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏)
        return

    with get_db_context() as db:
        try:
            user_to_reply = crud_user.get_user_by_telegram_id(db, customer_id)
            if not user_to_reply:
                pass
            else:
                photo_id = message.photo[-1].file_id
                caption = f"üñºÔ∏è <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:</b>\n\n{message.caption or ''}"
                
                # –ù—É–∂–µ–Ω –∫–∞—Å—Ç–æ–º–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏, —Ç–∞–∫ –∫–∞–∫ _send_message –Ω–µ —É–º–µ–µ—Ç —Å–ª–∞—Ç—å —Ñ–æ—Ç–æ
                # –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –µ–≥–æ –≤ notification_service
                success = await notification_service.send_photo_to_user(db, user_to_reply, photo_id, caption)

                if success:
                    await message.answer(f"‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è <b>{customer_name}</b>.", parse_mode="HTML")
                else:
                    await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è {customer_name}.")
        finally:
            db.close()

    await state.clear()


@admin_dialog_router.callback_query(F.data.startswith("request_contact:"))
async def request_contact_handler(callback: CallbackQuery):
    """–õ–æ–≤–∏—Ç –Ω–∞–∂–∞—Ç–∏–µ –∞–¥–º–∏–Ω–æ–º –∫–Ω–æ–ø–∫–∏ '–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç'."""
    customer_id_str = callback.data.split(":")[1]
    with get_db_context() as db:
        try:
            customer = crud_user.get_user_by_telegram_id(db, int(customer_id_str))
            if customer:
                admin_name = callback.from_user.first_name
                await notification_service.request_contact_from_user(db, customer, admin_name)
                await callback.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", show_alert=True)
            else:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        finally:
            db.close()