# app/bot/handlers/user.py

from typing import Optional
from aiogram import F, Router
from aiogram.filters import CommandStart, CommandObject
from aiogram.types import Message, WebAppInfo, ContentType
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from fastapi import UploadFile
from sqlalchemy.orm import Session
from app.clients.woocommerce import wc_client
from app.core.config import settings
from app.dependencies import get_db, get_db_context
from app.crud import user as crud_user
from app.models.user import User
from app.services import auth as auth_service
from app.bot.core import bot
from app.bot.filters.admin import IsAdminFilter
import logging
from app.services import auth as auth_service, user as user_service, storage as storage_service
from app.crud import dialogue as crud_dialogue
from app.bot.utils.user_display import get_display_name
logger = logging.getLogger(__name__)
# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è.
user_router = Router()


async def forward_to_admin(message: Message):
    """
    –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω-—á–∞—Ç.
    """
    user_info = f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:</b> {message.from_user.full_name}"
    if message.from_user.username:
        user_info += f" (@{message.from_user.username})"
    user_info += f"\n(ID: <code>{message.from_user.id}</code>)"

    builder = InlineKeyboardBuilder()
    builder.button(text="ü§ñ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_to:{message.from_user.id}")

    try:
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.forward(chat_id=settings.ADMIN_CHAT_ID)
        # –ò —Å–ª–µ–¥–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ —Å –∫–Ω–æ–ø–∫–æ–π
        await bot.send_message(
            chat_id=settings.ADMIN_CHAT_ID,
            text=user_info,
            reply_markup=builder.as_markup()
        )
        await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ú—ã —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º!")
    except Exception as e:
        logger.error(f"Failed to forward user message: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@user_router.message(CommandStart(), ~IsAdminFilter())
async def command_start_handler(message: Message, command: CommandObject) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –æ—Ç –ù–ï-–∞–¥–º–∏–Ω–æ–≤,
    —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ª–æ–≤–∏—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥.
    """
    if command.args and command.args.startswith("request_contact_"):
        # TODO: –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–∫–µ–Ω–∞ –∏–∑ command.args, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ–ø. –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        
        builder = ReplyKeyboardBuilder()
        builder.button(text="üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)
        
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
            reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
        )
        # –í–∞–∂–Ω–æ! –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        return
    
    referral_code = None
    if command.args and command.args.startswith("ref_"):
        referral_code = command.args.split("ref_")[1]
    
    db: Session = next(get_db())
    try:
        db_user = await auth_service.register_or_get_user(
                db=db, # <-- –ü–µ—Ä–µ–¥–∞–µ–º db
                user_info=message.from_user.model_dump(),
                referral_code=referral_code
            )
        user_service.update_user_profile_from_telegram(db, db_user, message.from_user.model_dump())
        if not db_user.bot_accessible:
            logger.info(f"User {db_user.id} re-activated the bot. Setting bot_accessible to True.")
            db_user.bot_accessible = True
            db.commit()
    finally:
        db.close()
    
    builder = InlineKeyboardBuilder()
    
    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    
    # 1. –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫, —É–±–∏—Ä–∞—è —Å–∏–º–≤–æ–ª @, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    bot_username = settings.TELEGRAM_BOT_USERNAME.lstrip('@')
    
    # 2. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç—É —Å–∞–º—É—é deep link —Å—Å—ã–ª–∫—É. 
    # –¢–∞–∫ –∫–∞–∫ —ç—Ç–æ –≥–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞, –ø–∞—Ä–∞–º–µ—Ç—Ä startapp –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    # –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–æ–¥–µ "home", —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –º–æ–≥ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.
    startapp_url = f"https://t.me/{bot_username}?startapp=home"
    
    # 3. –°–æ–∑–¥–∞–µ–º –û–ë–´–ß–ù–£–Æ URL-–∫–Ω–æ–ø–∫—É —Å –Ω–∞—à–µ–π —Å—Å—ã–ª–∫–æ–π
    builder.button(
        text="üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω",
        url=startapp_url
    )
    
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏.",
        reply_markup=builder.as_markup()
    )


@user_router.message(F.content_type == ContentType.CONTACT, ~IsAdminFilter())
async def handle_contact(message: Message):
    """
    –õ–æ–≤–∏—Ç –∫–æ–Ω—Ç–∞–∫—Ç, –∫–æ—Ç–æ—Ä—ã–º –ø–æ–¥–µ–ª–∏–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ,
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
    """
    contact = message.contact
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–ª–∏—Ç—Å—è —Å–≤–æ–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
    if message.from_user.id != contact.user_id:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.")
        return

    with get_db_context() as db:
        user = crud_user.get_user_by_telegram_id(db, message.from_user.id)
        if not user:
            logger.warning(f"Received contact from an unknown user with TG ID {message.from_user.id}. Ignoring.")
            return

        # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≤ –Ω–∞—à–µ–π –ë–î
        crud_user.update_user_phone(db, user, contact.phone_number)
        
        # 2. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å WooCommerce
        try:
            await wc_client.post(
                f"wc/v3/customers/{user.wordpress_id}",
                json={"billing": {"phone": contact.phone_number}}
            )
            logger.info(f"Successfully synced phone for user {user.id} to WooCommerce.")
        except Exception as e:
            logger.error(f"Failed to sync phone for user {user.id} to WooCommerce.", exc_info=True)

        # 3. –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥–µ
        display_name = await get_display_name_from_user(user)
        info_text = f"[–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {display_name} –ø–æ–¥–µ–ª–∏–ª—Å—è —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {contact.phone_number}"
        
        dialogue = crud_dialogue.get_open_dialogue_by_user(db, user_id=user.id)
        if dialogue:
            crud_dialogue.add_message_to_dialogue(db, dialogue=dialogue, sender=user, text=info_text, sender_type="user")
        else:
            dialogue = crud_dialogue.create_dialogue(db, user=user, first_message_text=info_text)
            
        # --- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –í –ß–ê–¢ –ü–û–î–î–ï–†–ñ–ö–ò ---
        
        # 4. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification_text = (
            f"üìû **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏–ª—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –≤ –¥–∏–∞–ª–æ–≥–µ #{dialogue.id}**\n\n"
            f"<b>–û—Ç:</b> {display_name} (TG ID: <code>{user.telegram_id}</code>)"
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å
        builder = InlineKeyboardBuilder()
        bot_username = settings.TELEGRAM_BOT_USERNAME.lstrip('@')
        admin_app_name = getattr(settings, "TELEGRAM_ADMIN_APP_NAME", settings.TELEGRAM_MINI_APP_ADMIN_NAME)
        profile_param = f"users-{user.id}"
        profile_url = f"https://t.me/{bot_username}/{admin_app_name}?startapp={profile_param}"
        builder.button(text="üë§ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞", url=profile_url)
        
        try:
            # 5. –°–ù–ê–ß–ê–õ–ê –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
            await bot.send_contact(
                chat_id=settings.SUPPORT_CHAT_ID,
                phone_number=contact.phone_number,
                first_name=contact.first_name or message.from_user.first_name,
                last_name=contact.last_name or message.from_user.last_name
            )
            
            # 6. –í–¢–û–†–´–ú —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫—É
            await bot.send_message(
                chat_id=settings.SUPPORT_CHAT_ID,
                text=notification_text,
                reply_markup=builder.as_markup()
            )
        except Exception as e:
            logger.error(f"Failed to send contact notification to support chat.", exc_info=True)
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç, —ç—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ª–æ–º–∞—Ç—å —Ñ–ª–æ—É –¥–ª—è —é–∑–µ—Ä–∞
        
        # ------------------------------------------------------------------

    # 7. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")

async def get_display_name_from_user(user: User) -> str:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        wc_user_data = (await wc_client.get(f"wc/v3/customers/{user.wordpress_id}")).json()
        return get_display_name(wc_user_data, user)
    except Exception:
        return user.username or f"ID {user.telegram_id}"

# --- –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –•–ï–ù–î–õ–ï–†–ê ---
@user_router.message(
    ~IsAdminFilter(), # –§–∏–ª—å—Ç—Ä –Ω–∞ –ù–ï-–∞–¥–º–∏–Ω–∞
    F.content_type.in_({ContentType.TEXT, ContentType.PHOTO, ContentType.VIDEO, ContentType.DOCUMENT})
)
async def handle_any_user_message(message: Message):
    """
    –õ–æ–≤–∏—Ç —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –¥–∏–∞–ª–æ–≥
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
    """
    user_tg_id = message.from_user.id
    
    # 1. –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    text_content = message.text or message.caption or ""
    media_type: Optional[str] = None
    media_url: Optional[str] = None
    file_name: Optional[str] = None
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
    if message.content_type != ContentType.TEXT:
        media_type = message.content_type.lower()
        file_id_to_download = None
        
        if message.photo:
            file_id_to_download = message.photo[-1].file_id # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            file_name = f"photo_{file_id_to_download}.jpg"
        elif message.video:
            file_id_to_download = message.video.file_id
            file_name = message.video.file_name or f"video_{file_id_to_download}.mp4"
        elif message.document:
            file_id_to_download = message.document.file_id
            file_name = message.document.file_name or f"document_{file_id_to_download}"
            
        if file_id_to_download:
            try:
                # 1. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ Telegram –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –≤ –ø–∞–º—è—Ç–∏
                file_info = await bot.get_file(file_id_to_download)
                file_stream = await bot.download_file(file_info.file_path) # –≠—Ç–æ –æ–±—ä–µ–∫—Ç io.BytesIO
                
                # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º ContentType (MIME-—Ç–∏–ø)
                content_type = "application/octet-stream" # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if message.photo:
                    content_type = "image/jpeg"
                elif message.video and message.video.mime_type:
                    content_type = message.video.mime_type
                elif message.document and message.document.mime_type:
                    content_type = message.document.mime_type

                # --- –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä—è–º–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –≤ —Å–µ—Ä–≤–∏—Å ---
                # –ù–∞–º –Ω–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç UploadFile.
                # –ú—ã –ø–µ—Ä–µ–¥–∞–µ–º —Å–∞–º —Ñ–∞–π–ª–æ–≤—ã–π –ø–æ—Ç–æ–∫ –∏ –µ–≥–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ.
                media_url = await storage_service.upload_file_object_to_s3(
                    file_obj=file_stream,
                    file_name=file_name,
                    content_type=content_type,
                    bucket_name=settings.S3_BUCKET_NAME
                )

            except Exception as e:
                logger.error(f"Failed to process media from user {user_tg_id}", exc_info=True)
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return

    # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –º–µ–¥–∏–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not text_content and not media_url:
        logger.warning(f"Ignoring message from {user_tg_id} because it has no text and media processing failed.")
        return

    # 2. –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    with get_db_context() as db:
        user = crud_user.get_user_by_telegram_id(db, user_tg_id)
        if not user:
            logger.warning(f"Received a message from an unknown user with TG ID {user_tg_id}. Ignoring.")
            return

        # –ò—â–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–π –¥–∏–∞–ª–æ–≥ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        dialogue = crud_dialogue.get_open_dialogue_by_user(db, user_id=user.id)
        
        if dialogue:
            crud_dialogue.add_message_to_dialogue(
                db, dialogue=dialogue, sender=user, text=text_content, 
                sender_type="user", media_type=media_type, media_url=media_url, file_name=file_name
            )
        else:
            dialogue = crud_dialogue.create_dialogue(
                db, user=user, first_message_text=text_content, 
                media_type=media_type, media_url=media_url, file_name=file_name
            )
    
        # 3. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        display_name = await get_display_name_from_user(user)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        message_part = f"¬´<i>{text_content}</i>¬ª" if text_content else "[–ú–µ–¥–∏–∞—Ñ–∞–π–ª –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏]"
        if media_url:
            message_part += f"\nüìé <a href='{media_url}'>–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ ({file_name or media_type})</a>"

        notification_text = (
            f"üí¨ <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥–µ #{dialogue.id}</b>\n\n"
            f"<b>–û—Ç:</b> {display_name} (TG ID: <code>{user.telegram_id}</code>)\n"
            f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {message_part}"
        )
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        builder = InlineKeyboardBuilder()
        bot_username = settings.TELEGRAM_BOT_USERNAME.lstrip('@')
        admin_app_name = getattr(settings, "TELEGRAM_ADMIN_APP_NAME", settings.TELEGRAM_MINI_APP_ADMIN_NAME)
        
        reply_param = f"support-dialogues-{dialogue.id}"
        profile_param = f"users-{user.id}"
        
        reply_url = f"https://t.me/{bot_username}/{admin_app_name}?startapp={reply_param}"
        profile_url = f"https://t.me/{bot_username}/{admin_app_name}?startapp={profile_param}"
        
        builder.button(text="‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å –≤ Mini App", url=reply_url)
        builder.button(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞", url=profile_url)
        builder.adjust(1)
        
        try:
            await bot.send_message(
                chat_id=settings.SUPPORT_CHAT_ID,
                text=notification_text,
                reply_markup=builder.as_markup()
            )
            # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ
            await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º.")
        except Exception as e:
            logger.error(f"Failed to send support notification to chat {settings.SUPPORT_CHAT_ID}", exc_info=True)
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")