# app/bot/handlers/user.py

from aiogram import F, Router
from aiogram.filters import CommandStart, CommandObject
from aiogram.types import Message, WebAppInfo, ContentType
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from sqlalchemy.orm import Session
from app.clients.woocommerce import wc_client
from app.core.config import settings
from app.dependencies import get_db, get_db_context
from app.crud import user as crud_user
from app.services import auth as auth_service
from app.bot.core import bot
from app.bot.filters.admin import IsAdminFilter
import logging
from app.services import user as user_service

logger = logging.getLogger(__name__)
# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è.
user_router = Router()


async def forward_to_admin(message: Message):
    """
    –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω-—á–∞—Ç.
    """
    user_info = f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:</b> {message.from_user.full_name}"
    if message.from_user.username:
        user_info += f" (@{message.from_user.username})"
    user_info += f"\n(ID: <code>{message.from_user.id}</code>)"

    builder = InlineKeyboardBuilder()
    builder.button(text="ü§ñ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_to:{message.from_user.id}")

    try:
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.forward(chat_id=settings.ADMIN_CHAT_ID)
        # –ò —Å–ª–µ–¥–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ —Å –∫–Ω–æ–ø–∫–æ–π
        await bot.send_message(
            chat_id=settings.ADMIN_CHAT_ID,
            text=user_info,
            reply_markup=builder.as_markup()
        )
        await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ú—ã —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º!")
    except Exception as e:
        logger.error(f"Failed to forward user message: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@user_router.message(CommandStart(), ~IsAdminFilter())
async def command_start_handler(message: Message, command: CommandObject) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –æ—Ç –ù–ï-–∞–¥–º–∏–Ω–æ–≤,
    —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ª–æ–≤–∏—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥.
    """
    if command.args and command.args.startswith("request_contact_"):
        # TODO: –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–∫–µ–Ω–∞ –∏–∑ command.args, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ–ø. –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        
        builder = ReplyKeyboardBuilder()
        builder.button(text="üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)
        
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
            reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
        )
        # –í–∞–∂–Ω–æ! –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        return
    
    referral_code = None
    if command.args and command.args.startswith("ref_"):
        referral_code = command.args.split("ref_")[1]
    
    db: Session = next(get_db())
    try:
        db_user = await auth_service.register_or_get_user(
            user_info=message.from_user.model_dump(),
            referral_code=referral_code
        )
        user_service.update_user_profile_from_telegram(db, db_user, message.from_user.model_dump())
        if not db_user.bot_accessible:
            logger.info(f"User {db_user.id} re-activated the bot. Setting bot_accessible to True.")
            db_user.bot_accessible = True
            db.commit()
    finally:
        db.close()
    
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω",
        web_app=WebAppInfo(url=settings.MINI_APP_URL) 
    )
    
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏.",
        reply_markup=builder.as_markup()
    )


@user_router.message(F.content_type == ContentType.CONTACT, ~IsAdminFilter())
async def handle_contact(message: Message):
    """
    –õ–æ–≤–∏—Ç –∫–æ–Ω—Ç–∞–∫—Ç, –∫–æ—Ç–æ—Ä—ã–º –ø–æ–¥–µ–ª–∏–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ
    –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç.
    """
    contact = message.contact
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–ª–∏—Ç—Å—è —Å–≤–æ–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
    if message.from_user.id != contact.user_id:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.")
        return

    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø ---
    with get_db_context() as db:
        user = crud_user.get_user_by_telegram_id(db, message.from_user.id)
        if user:
            # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–∞—à—É –ë–î
            crud_user.update_user_phone(db, user, contact.phone_number)
            
            # 2. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å WooCommerce
            try:
                await wc_client.post(
                    f"wc/v3/customers/{user.wordpress_id}",
                    json={"billing": {"phone": contact.phone_number}}
                )
                logger.info(f"Successfully synced phone for user {user.id} to WooCommerce.")
            except Exception as e:
                logger.error(f"Failed to sync phone for user {user.id} to WooCommerce.", exc_info=True)
        else:
            logger.warning(f"Received contact from user {message.from_user.id}, but user not found in DB.")

    # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=settings.MINI_APP_URL))
    
    await message.answer(
        "‚úÖ –°–ø–∞—Å–∏–±–æ, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∫—É–ø–∫–∞–º.",
        reply_markup=builder.as_markup()
    )
    # ---------------------------

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∞–¥–º–∏–Ω—É (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
    user_info = f"<b>–û—Ç:</b> {message.from_user.full_name}"
    if message.from_user.username:
        user_info += f" (@{message.from_user.username})"
    
    await bot.send_contact(
        chat_id=settings.ADMIN_CHAT_ID,
        phone_number=contact.phone_number,
        first_name=contact.first_name,
        last_name=contact.last_name,
        user_id=contact.user_id
    )
    await bot.send_message(settings.ADMIN_CHAT_ID, user_info)

@user_router.message(~IsAdminFilter())
async def handle_any_user_message(message: Message):
    """
    –õ–æ–≤–∏—Ç –õ–Æ–ë–û–ï –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ù–ï-–∞–¥–º–∏–Ω–∞), –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –ø–æ–¥–æ—à–ª–æ
    –ø–æ–¥ –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã (/start, –∫–æ–Ω—Ç–∞–∫—Ç), –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –µ–≥–æ –∞–¥–º–∏–Ω—É.
    """
    await forward_to_admin(message)