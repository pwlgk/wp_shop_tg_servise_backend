# app/bot/services/admin_panel.py
from typing import Optional
from app.models.user import User
from app.clients.woocommerce import wc_client
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.bot.utils.user_display import get_display_name
from app.crud import user as crud_user
from app.bot.callbacks.admin import UserListCallback
import math
from sqlalchemy.orm import Session
from aiogram.types import InlineKeyboardButton # <-- –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
from app.crud import user as crud_user
from app.clients.woocommerce import wc_client

async def format_user_card(user: User) -> tuple[str, InlineKeyboardBuilder]:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø. –∏–Ω—Ñ–æ –∏–∑ WC
    wc_user_data = (await wc_client.get(f"wc/v3/customers/{user.wordpress_id}")).json()
    display_name = get_display_name(wc_user_data, user)

    # full_name = f"{wc_user_data.get('first_name', '')} {wc_user_data.get('last_name', '')}".strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–∫–∞–∑–∞
    orders_data = (await wc_client.get(f"wc/v3/orders", params={"customer": user.wordpress_id, "per_page": 3})).json()
    orders_lines = []
    if orders_data:
        for order in orders_data:
            orders_lines.append(f"  ‚Ä¢ –ó–∞–∫–∞–∑ #{order['number']} ({order['status']}) - {order['total']} —Ä—É–±.")
    else:
        orders_lines.append("<i>–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.</i>")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    card_text = (
        f"üë§ <b>–ö–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        f"<b>ID:</b> <code>{user.id}</code> (TG ID: <code>{user.telegram_id}</code>)\n"
        # f"<b>–ò–º—è:</b> {full_name or '<i>–Ω–µ —É–∫–∞–∑–∞–Ω–æ</i>'}\n"
        f"<b>–ò–º—è:</b> {display_name}\n"

        f"<b>Username:</b> @{user.username or '<i>–Ω–µ —É–∫–∞–∑–∞–Ω</i>'}\n"
        f"<b>–£—Ä–æ–≤–µ–Ω—å:</b> {user.level.capitalize()}\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if not user.is_blocked else 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}\n\n"
        f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:</b>\n" + "\n".join(orders_lines)
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    builder = InlineKeyboardBuilder()
    builder.button(text="üë§ –ù–∞–ø–∏—Å–∞—Ç—å", url=f"tg://user?id={user.telegram_id}")
    builder.button(text="ü§ñ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_to:{user.telegram_id}")
    
    if user.is_blocked:
        builder.button(text="‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"user_unblock_confirm:{user.id}")
    else:
        builder.button(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"user_block_confirm:{user.id}")
        
    builder.adjust(2)
    return card_text, builder


USERS_PER_PAGE = 5

async def generate_user_list_message(
    db: Session,
    page: int = 1,
    level: str | None = None,
    bot_blocked: bool | None = None
):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    
    skip = (page - 1) * USERS_PER_PAGE
    users = crud_user.get_users(db, skip, USERS_PER_PAGE, level, bot_blocked)
    total_users = crud_user.count_users_with_filters(db, level, bot_blocked)
    total_pages = math.ceil(total_users / USERS_PER_PAGE) if total_users > 0 else 1

    message_lines = [f"üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b> (–°—Ç—Ä. {page}/{total_pages})\n"]
    if users:
        for user in users:
            try:
                wc_user_data = (await wc_client.get(f"wc/v3/customers/{user.wordpress_id}")).json()
                display_name = f"{wc_user_data.get('first_name', '')} {wc_user_data.get('last_name', '')}".strip() or user.username or f"ID {user.telegram_id}"
            except Exception:
                display_name = user.username or f"ID {user.telegram_id}"
            
            status_icon = "‚úÖ" if user.bot_accessible else "ü§ñ"
            block_icon = "üö´" if user.is_blocked else ""
            message_lines.append(f"‚Ä¢ /find_user <code>{user.telegram_id}</code> - {display_name} {status_icon}{block_icon}")
    else:
        message_lines.append("<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</i>")

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ö–õ–ê–í–ò–ê–¢–£–†–´ ---
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 1:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ø–µ—Ä–µ–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ —è–≤–Ω–æ–º –≤–∏–¥–µ ---
                callback_data=UserListCallback(action="nav", page=page-1, level=level, bot_blocked=bot_blocked).pack()
            )
        )
    if page < total_pages:
        nav_buttons.append(
            InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï ---
                callback_data=UserListCallback(action="nav", page=page+1, level=level, bot_blocked=bot_blocked).pack()
            )
        )
    
    # –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é
    filter_buttons_row1 = []
    levels = ["all", "bronze", "silver", "gold"]
    for lvl in levels:
        text = f"üèÖ {lvl.capitalize()}" if lvl != level else f"‚úÖ {lvl.capitalize()}"
        filter_buttons_row1.append(
            InlineKeyboardButton(text=text, callback_data=UserListCallback(
                action="f_level", 
                page=1,
                # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è level
                level=lvl, 
                # –°–û–•–†–ê–ù–Ø–ï–ú —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è bot_blocked
                bot_blocked=bot_blocked 
            ).pack())
        )

    # –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É –±–æ—Ç–∞
    filter_buttons_row2 = []
    blocked_text = "ü§ñ –ó–∞–±–ª."
    if bot_blocked is True: blocked_text = "‚úÖ –ó–∞–±–ª."
    if bot_blocked is False: blocked_text = "‚òëÔ∏è –ù–µ –∑–∞–±–ª." # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–º –±—É–¥–µ—Ç –°–õ–ï–î–£–Æ–©–ï–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
    next_bot_blocked_state: Optional[bool] = None
    if bot_blocked is None: next_bot_blocked_state = True
    elif bot_blocked is True: next_bot_blocked_state = False
    elif bot_blocked is False: next_bot_blocked_state = None
        
    # filter_buttons_row2.append(
    #     InlineKeyboardButton(
    #         text=blocked_text,
    #         callback_data=UserListCallback(
    #             action="f_block",
    #             page=1,
    #             # –°–û–•–†–ê–ù–Ø–ï–ú —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è level
    #             level=level,
    #             # –ü–ï–†–ï–î–ê–ï–ú –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è bot_blocked
    #             bot_blocked=next_bot_blocked_state
    #         ).pack()
    #     )
    # )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –±–∏–ª–¥–µ—Ä
    if filter_buttons_row1: builder.row(*filter_buttons_row1)
    if nav_buttons or filter_buttons_row2: builder.row(*nav_buttons, *filter_buttons_row2)

    return "\n".join(message_lines), builder.as_markup()