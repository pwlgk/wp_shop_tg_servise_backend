# app/bot/services/notification.py
import asyncio
from pydantic import HttpUrl
from sqlalchemy.orm import Session
from aiogram.exceptions import TelegramForbiddenError
from app.schemas.order import Order
from app.bot.core import bot
from app.models.user import User
from app.crud import user as crud_user # –ù–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è CRUD –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
from app.core.config import settings
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.models.user import User
from aiogram.utils.keyboard import ReplyKeyboardBuilder # <-- –ú–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
import logging

logger = logging.getLogger(__name__)

async def _send_message(db: Session, user: User, text: str) -> tuple[bool, str | None]:
    """
    –ü—Ä–∏–≤–∞—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å 'bot_accessible' –≤ —Å–ª—É—á–∞–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (—É—Å–ø–µ—Ö: bool, –ø—Ä–∏—á–∏–Ω–∞_–Ω–µ—É–¥–∞—á–∏: str | None).
    """
    if not user.bot_accessible:
        reason = "Bot is marked as inaccessible"
        logger.info(f"Skipping notification for user {user.id}: {reason}.")
        return False, reason
            
    try:
        await bot.send_message(chat_id=user.telegram_id, text=text)
        return True, None # –£—Å–ø–µ—Ö, –ø—Ä–∏—á–∏–Ω—ã –Ω–µ—Ç
    except TelegramForbiddenError:
        reason = "User has blocked the bot"
        logger.error(f"User {user.id} has blocked the bot. Updating status.")
        user.bot_accessible = False
        db.add(user)
        db.commit()
        return False, reason
    except Exception as e:
        reason = str(e) # –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
        logger.error(f"Failed to send message to user {user.id}: {reason}")
        return False, reason
    

async def ping_user(db: Session, user: User) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è—è –∏ —Å—Ä–∞–∑—É —É–¥–∞–ª—è—è "—Ç–∏—Ö–æ–µ" —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (True/False).
    """
    # –ú—ã –Ω–µ –º–æ–∂–µ–º –ø–æ–ª–∞–≥–∞—Ç—å—Å—è –Ω–∞ user.bot_accessible, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞.
    # –ü–æ—ç—Ç–æ–º—É –º—ã –≤—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏–Ω–≥.
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "—Ç–∏—Ö–æ–µ" —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞
        sent_message = await bot.send_message(
            chat_id=user.telegram_id, 
            text=".", # –ü—Ä–æ—Å—Ç–æ —Ç–æ—á–∫–∞ –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
            disable_notification=True
        )
        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–¥–∞–ª–∞—Å—å, —Å—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.delete_message(
            chat_id=user.telegram_id, 
            message_id=sent_message.message_id
        )
        
        # –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç, –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω. –û–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î.
        if not user.bot_accessible:
            user.bot_accessible = True
            db.add(user)
            db.commit()
        return True

    except TelegramForbiddenError:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
        if user.bot_accessible:
            user.bot_accessible = False
            db.add(user)
            db.commit()
        return False
    except Exception as e:
        # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω)
        logger.error(f"Ping failed for user {user.id}: {e}")
        if user.bot_accessible:
            user.bot_accessible = False
            db.add(user)
            db.commit()
        return False

def _format_order_details_for_user(order: Order) -> str: # <-- –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ –¥–ª—è –ö–õ–ò–ï–ù–¢–ê."""
    
    billing = order.billing
    recipient_name = f"{billing.first_name or ''} {billing.last_name or ''}".strip()
    recipient_lines = []
    if recipient_name: recipient_lines.append(f"<b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {recipient_name}")
    if billing.phone: recipient_lines.append(f"<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {billing.phone}")
    # if billing.email: recipient_lines.append(f"<b>Email:</b> {billing.email}")
    
    items_lines = ["<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>"]
    for item in order.line_items:
        items_lines.append(f"‚Ä¢ {item.name} ({item.quantity} —à—Ç.) - {item.total} —Ä—É–±.")
        
    message_parts = [
        f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ<b>{order.number}</b> —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n",
        f"<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> {order.payment_method_title}",
    ]
    message_parts.extend(recipient_lines)
    
    if recipient_lines: message_parts.append("")
        
    message_parts.extend(items_lines)
    message_parts.append(f"\n<b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {order.total} —Ä—É–±.</b>")
    
    if order.status == 'on-hold':
        message_parts.append("\n–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑! –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    else:
        message_parts.append("\n–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑!")
        
    return "\n".join(message_parts)

def _format_order_details_for_admin(order: Order) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ê–î–ú–ò–ù–ê (–±–µ–∑ "—Å–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑")."""
    
    billing = order.billing
    recipient_name = f"{billing.first_name or ''} {billing.last_name or ''}".strip()
    recipient_lines = []
    if recipient_name: recipient_lines.append(f"<b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {recipient_name}")
    if billing.phone: recipient_lines.append(f"<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {billing.phone}")
    if billing.email: recipient_lines.append(f"<b>Email:</b> {billing.email}")

    items_lines = ["<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>"]
    for item in order.line_items:
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –Ω—É–ª–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª —Ä—É–±–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞
        price_per_item = float(item.price)
        total_item_price = float(item.total)
        items_lines.append(f"‚Ä¢ {item.name} ({item.quantity} —à—Ç.) - {total_item_price:,.0f} ‚ÇΩ")

    total_order_price = float(order.total)
    
    message_parts = [
        f"–ó–∞–∫–∞–∑ ‚Ññ<b>{order.number}</b>",
        f"<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> {order.payment_method_title}",
    ]
    message_parts.extend(recipient_lines)
    
    if recipient_lines: message_parts.append("")
        
    message_parts.extend(items_lines)
    message_parts.append(f"\n<b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total_order_price:,.0f} ‚ÇΩ</b>")
    
    return "\n".join(message_parts)


async def send_new_order_confirmation(db: Session, user: User, order: Order):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ (—Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–µ—Å—å –æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞).
    """
    message = _format_order_details_for_user(order)
    await _send_message(db, user, message)
async def send_order_cancellation_confirmation(db: Session, user: User, order_id: int):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞."""
    message = f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ<b>{order_id}</b> –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω."
    await _send_message(db, user, message)

async def send_order_status_update(db: Session, user: User, order_id: int, new_status_title: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞."""
    message = f"üîî –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ ‚Ññ<b>{order_id}</b> –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <b>{new_status_title}</b>"
    await _send_message(db, user, message)

async def send_points_earned(db: Session, user: User, points_added: int, order_id: int):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤."""
    message = (
        f"üí∞ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>{points_added} –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤</b> –∑–∞ –∑–∞–∫–∞–∑ ‚Ññ<b>{order_id}</b>!\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–∫—É–ø–æ–∫."
    )
    await _send_message(db, user, message)

async def send_referral_bonus(db: Session, user: User, referred_user_name: str, points_added: int):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞ –∑–∞ –ø–æ–∫—É–ø–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    message = (
        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –¥—Ä—É–≥ <b>{referred_user_name}</b> —Å–æ–≤–µ—Ä—à–∏–ª –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É!\n\n"
        f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>{points_added} –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤</b> –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏!"
    )
    await _send_message(db, user, message)

async def request_contact_from_user(db: Session, user: User, admin_name: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞,
    –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (ReplyKeyboardMarkup).
    """
    message_text = (
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω–µ–¥–∂–µ—Ä <b>{admin_name}</b> —Ö–æ—Ç–µ–ª –±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞. "
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
    )
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –ò—Å–ø–æ–ª—å–∑—É–µ–º ReplyKeyboardBuilder ---
    builder = ReplyKeyboardBuilder()
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º request_contact
    builder.add(KeyboardButton(text="üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True))
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –æ–Ω–∞ –∏—Å—á–µ–∑–ª–∞ –ø–æ—Å–ª–µ –æ–¥–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
    keyboard = builder.as_markup(
        resize_keyboard=True, 
        one_time_keyboard=True
    )
    # --------------------------------------------------------

    if not user.bot_accessible:
        logger.info(f"Skipping contact request for user {user.id}: bot is marked as inaccessible.")
        return

    try:
        await bot.send_message(
            chat_id=user.telegram_id,
            text=message_text,
            reply_markup=keyboard # <-- –ü–µ—Ä–µ–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
    except TelegramForbiddenError:
        logger.warning(f"User {user.id} has blocked the bot. Updating status.")
        user.bot_accessible = False
        db.add(user)
        db.commit()
    except Exception as e:
        logger.error(f"Failed to send contact request to user {user.id}: {e}")

async def send_new_order_to_admin(order: Order, customer: User):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç."""
    message_text = _format_order_details_for_admin(order)
    
    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
    # –ë–µ—Ä–µ–º –§–ò–û –∏–∑ –∞–¥—Ä–µ—Å–∞ (`billing`) —Å–∞–º–æ–≥–æ –∑–∞–∫–∞–∑–∞, –∞ –Ω–µ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ User
    billing_info = order.billing
    customer_name = f"{billing_info.first_name or ''} {billing_info.last_name or ''}".strip()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º username –∏–∑ –Ω–∞—à–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞ User –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    customer_info = f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {customer_name}"
    if customer.username:
        customer_info += f" (@{customer.username})"
    
    admin_message = f"<b>üî• –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n{customer_info}\n\n{message_text}"
    # --------------------------------

    builder = InlineKeyboardBuilder()
    
    customer_telegram_id = order.customer_telegram_id
    if customer_telegram_id:
        builder.button(text="üë§ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É", url=f"tg://user?id={customer_telegram_id}")
        builder.button(text="ü§ñ –û—Ç–≤–µ—Ç–∏—Ç—å –æ—Ç –±–æ—Ç–∞", callback_data=f"reply_to:{customer_telegram_id}")
        # --- –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê –ó–ê–ü–†–û–°–ê –ö–û–ù–¢–ê–ö–¢–ê ---
        builder.button(text="üìû –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", callback_data=f"request_contact:{customer_telegram_id}")
    
    # --- –ù–û–í–ê–Ø DEEP LINK –°–°–´–õ–ö–ê ---
    # Deep link –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–∫–∞–∑–∞ –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ WooCommerce
    builder.button(text="üîó –ó–∞–∫–∞–∑ –≤ WP", url=f"{settings.WP_URL}/wp-admin/post.php?post={order.id}&action=edit")
    builder.adjust(2)

    await bot.send_message(
        chat_id=settings.ADMIN_CHAT_ID,
        text=admin_message,
        reply_markup=builder.as_markup()
    )

async def send_broadcast_report_to_admin(broadcast_id: int, sent_count: int, failed_users_info: list):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç."""
    
    failed_count = len(failed_users_info)
    total_processed = sent_count + failed_count

    report_lines = [
        f"<b>üìä –û—Ç—á–µ—Ç –ø–æ —Ä–∞—Å—Å—ã–ª–∫–µ #{broadcast_id}</b>\n",
        f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {sent_count}",
        f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:</b> {failed_count}",
        f"üë• <b>–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {total_processed}\n"
    ]

    if failed_count > 0:
        report_lines.append("<b>–°–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫:</b>")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–º –≤—ã–≤–æ–¥, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –≤ —á–∞—Ç, –µ—Å–ª–∏ –æ—à–∏–±–æ–∫ –º–Ω–æ–≥–æ
        for i, failure in enumerate(failed_users_info[:10]):
            user = failure['user']
            reason = failure['reason']
            user_info = f"<a href='tg://user?id={user.telegram_id}'>{user.username or user.telegram_id}</a>"
            report_lines.append(f"{i+1}. {user_info} - <i>–ü—Ä–∏—á–∏–Ω–∞: {reason}</i>")
            
        if failed_count > 10:
            report_lines.append(f"\n<i>... –∏ –µ—â–µ {failed_count - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.</i>")

    report_text = "\n".join(report_lines)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
    await bot.send_message(
        chat_id=settings.ADMIN_CHAT_ID,
        text=report_text,
        parse_mode="HTML"
    )

async def send_photo_to_user(db: Session, user: User, photo_id: str, caption: str) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    if not user.bot_accessible:
        return False
        
    try:
        await bot.send_photo(
            chat_id=user.telegram_id, 
            photo=photo_id, 
            caption=caption,
            parse_mode="HTML"
        )
        return True
    except TelegramForbiddenError:
        user.bot_accessible = False
        db.add(user)
        db.commit()
        return False
    except Exception as e:
        logger.error(f"Failed to send photo to user {user.id}: {e}")
        return False
    
async def send_points_expired_notification(db: Session, user: User, points_expired: int):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–≥–æ—Ä–∞–Ω–∏–∏ –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤."""
    message = (
        f"üî• –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–∏—Ö –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –∏—Å—Ç–µ–∫.\n\n"
        f"–°–ø–∏—Å–∞–Ω–æ: <b>{points_expired} –±–∞–ª–ª–æ–≤</b>.\n\n"
        f"–°–æ–≤–µ—Ä—à–∞–π—Ç–µ –ø–æ–∫—É–ø–∫–∏, —á—Ç–æ–±—ã –Ω–∞–∫–æ–ø–∏—Ç—å –Ω–æ–≤—ã–µ!"
    )
    await _send_message(db, user, message)

async def send_points_expiring_soon_notification(db: Session, user: User, points_expiring: int, days_left: int):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º —Å–≥–æ—Ä–∞–Ω–∏–∏ –±–∞–ª–ª–æ–≤."""
    # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è —Å–ª–æ–≤–∞ "–¥–µ–Ω—å"
    day_word = "–¥–Ω–µ–π"
    if days_left == 1:
        day_word = "–¥–µ–Ω—å"
    elif 1 < days_left < 5:
        day_word = "–¥–Ω—è"

    message = (
        f"‚è≥ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!</b>\n\n"
        f"–ß–µ—Ä–µ–∑ <b>{days_left} {day_word}</b> —Å –≤–∞—à–µ–≥–æ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Å—á–µ—Ç–∞ —Å–≥–æ—Ä–∏—Ç <b>{points_expiring} –±–∞–ª–ª–æ–≤</b>.\n\n"
        f"–£—Å–ø–µ–π—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –∏—Ö –Ω–∞ –ø—Ä–∏—è—Ç–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏! üéÅ"
    )
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É, –≤–µ–¥—É—â—É—é –≤ –º–∞–≥–∞–∑–∏–Ω
    # builder = InlineKeyboardBuilder()
    # builder.button(text="üõçÔ∏è –ü–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã", web_app=...)
    
    await _send_message(db, user, message)


async def send_promo_notification(
    db: Session,
    user: User,
    title: str,
    text: str,
    image_url: str | None,
    action_url: str | None
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–∞–∫—Ü–∏—é).
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π-—Å—Å—ã–ª–∫–æ–π –≤ Mini App.
    """
    if not user.bot_accessible:
        logger.info(f"Skipping promo for user {user.id}: bot is marked as inaccessible.")
        return

    full_text = f"<b>{title}</b>\n\n{text}"
    if image_url and len(full_text) > 1024:
        full_text = full_text[:1020] + "..."

    reply_markup = None
    if action_url:
        # --- –ù–û–í–ê–Ø, –ù–ê–î–ï–ñ–ù–ê–Ø –õ–û–ì–ò–ö–ê –°–ë–û–†–ö–ò URL ---
        full_action_url = None
        try:
            # –°–ø–æ—Å–æ–± 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —É–∂–µ –ø–æ–ª–Ω—ã–º URL
            HttpUrl(action_url)
            full_action_url = action_url
        except (ValueError, TypeError):
            # –°–ø–æ—Å–æ–± 2: –ï—Å–ª–∏ –Ω–µ—Ç, –∏ —ç—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å, —Å–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π URL
            if action_url.startswith('/'):
                # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π —Å–ª—ç—à –≤ –∫–æ–Ω—Ü–µ MINI_APP_URL, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω—ã—Ö //
                base_app_url = settings.MINI_APP_URL.rstrip('/')
                full_action_url = f"{base_app_url}{action_url}"
        
        if full_action_url:
            try:
                # –ï—â–µ –æ–¥–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏—Ç–æ–≥–æ–≤—ã–π URL –≤–∞–ª–∏–¥–µ–Ω
                HttpUrl(full_action_url)
                
                builder = InlineKeyboardBuilder()
                builder.button(
                    text="‚ú® –ü–µ—Ä–µ–π—Ç–∏ –∫ –∞–∫—Ü–∏–∏",
                    web_app=WebAppInfo(url=full_action_url)
                )
                reply_markup = builder.as_markup()
            except (ValueError, TypeError):
                logger.warning(f"Generated action_url '{full_action_url}' is not a valid URL. Sending promo without a button.")
        else:
            logger.warning(f"Provided action_url '{action_url}' is not a valid relative or absolute URL. Sending promo without a button.")
        # -----------------------------------------------

    try:
        if image_url:
            await bot.send_photo(
                chat_id=user.telegram_id,
                photo=image_url,
                caption=full_text,
                reply_markup=reply_markup
            )
        else:
            await bot.send_message(
                chat_id=user.telegram_id,
                text=full_text,
                reply_markup=reply_markup,
                disable_web_page_preview=True
            )
    except TelegramForbiddenError:
        print(f"User {user.id} has blocked the bot while sending promo. Updating status.")
        user.bot_accessible = False
        db.add(user)
        db.commit()
    except Exception as e:
        print(f"Failed to send promo notification to user {user.id}: {e}")


async def send_error_to_super_admins(error_message: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –≤—Å–µ–º —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    if not settings.SUPER_ADMIN_IDS:
        logger.warning("SUPER_ADMIN_IDS is not set. Critical error cannot be sent.")
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.gather –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞–º
    tasks = []
    for admin_id in settings.SUPER_ADMIN_IDS:
        try:
            # –û–±—Ä–µ–∑–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–ª–∏–º–∏—Ç Telegram 4096 —Å–∏–º–≤–æ–ª–æ–≤)
            if len(error_message) > 4096:
                error_message = error_message[:4090] + "\n[...]"
            
            task = bot.send_message(
                chat_id=admin_id,
                text=error_message,
                parse_mode="HTML"
            )
            tasks.append(task)
        except Exception as e:
            logger.error(f"Failed to create send_message task for super admin {admin_id}: {e}")

    if tasks:
        await asyncio.gather(*tasks, return_exceptions=True) # return_exceptions=True, —á—Ç–æ–±—ã –Ω–µ —É–ø–∞—Å—Ç—å, –µ—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞

async def send_birthday_greeting(db: Session, user: User, points_added: int):
    """–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è."""
    message = (
        f"üéâ <b>–° –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è, {user.first_name or '–¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥'}!</b>\n\n"
        f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º! –í —ç—Ç–æ—Ç –æ—Å–æ–±–µ–Ω–Ω—ã–π –¥–µ–Ω—å –º—ã —Ö–æ—Ç–∏–º —Å–¥–µ–ª–∞—Ç—å –≤–∞–º –ø–æ–¥–∞—Ä–æ–∫ –∏ –Ω–∞—á–∏—Å–ª—è–µ–º "
        f"<b>{points_added} –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤</b> –Ω–∞ –≤–∞—à —Å—á–µ—Ç.\n\n"
        f"–ñ–µ–ª–∞–µ–º –≤–∞–º –≤—Å–µ–≥–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∏ –∂–¥–µ–º –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ! ü•≥"
    )
    await _send_message(db, user, message)

async def send_manual_points_update(db: Session, user: User, points_adjusted: int, comment: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä—É—á–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    if points_adjusted > 0:
        action_text = f"‚úÖ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>{points_adjusted} –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤</b>."
    else:
        # –£–±–∏—Ä–∞–µ–º –º–∏–Ω—É—Å –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        action_text = f"‚ùå –° –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ —Å–ø–∏—Å–∞–Ω–æ <b>{-points_adjusted} –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤</b>."
    
    comment_text = f"<i>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {comment}</i>" if comment else ""
    
    message = f"{action_text}\n{comment_text}".strip()
    await _send_message(db, user, message)


async def send_order_cancellation_to_admin(order_id: int, user: User):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç –æ —Ç–æ–º, —á—Ç–æ
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑.
    """
    user_info = f"{user.first_name or ''} {user.last_name or ''}".strip()
    if user.username:
        user_info += f" (@{user.username})"
    else:
        user_info += f" (ID: {user.telegram_id})"

    message = (
        f"üî¥ **–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–º!**\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user_info}</b> —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ ‚Ññ<b>{order_id}</b>."
    )
    
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∑–∞–∫–∞–∑—É –≤ WP
    builder = InlineKeyboardBuilder()
    builder.button(text="üîó –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑ –≤ WP", url=f"{settings.WP_URL}/wp-admin/post.php?post={order_id}&action=edit")
    
    await bot.send_message(
        chat_id=settings.ADMIN_CHAT_ID,
        text=message,
        reply_markup=builder.as_markup()
    )


async def send_welcome_bonus(db: Session, user: User, points_added: int):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.
    """
    message = (
        f"üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        f"–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ! –í –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–¥–∞—Ä–∫–∞ –º—ã –Ω–∞—á–∏—Å–ª–∏–ª–∏ –≤–∞–º "
        f"<b>{points_added} –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–∞–ª–ª–æ–≤</b>.\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤–∞—à–∏—Ö –ø–µ—Ä–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ —à–æ–ø–ø–∏–Ω–≥–∞!"
    )
    await _send_message(db, user, message)


async def send_points_refund_notification(db: Session, user: User, points_refunded: int, order_id: int):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å–ø–∏—Å–∞–Ω–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞."""
    message = (
        f"üîÑ <b>–ë–æ–Ω—É—Å—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã!</b>\n\n"
        f"–ó–∞–∫–∞–∑ ‚Ññ<b>{order_id}</b> –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω, –∏ –º—ã –≤–µ—Ä–Ω—É–ª–∏ –Ω–∞ –≤–∞—à —Å—á–µ—Ç "
        f"<b>{points_refunded} —Å–ø–∏—Å–∞–Ω–Ω—ã—Ö –±–∞–ª–ª–æ–≤</b>."
    )
    await _send_message(db, user, message)

async def send_activation_notification(db: Session, user: User, promo_code: str):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø–æ–∫—É–ø–æ–∫."""
    message = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name or '–º—ã –∑–∞–º–µ—Ç–∏–ª–∏'}, —á—Ç–æ –≤—ã –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª–∏ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É!\n\n"
        f"–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —à–æ–ø–ø–∏–Ω–≥ –µ—â–µ –ø—Ä–∏—è—Ç–Ω–µ–µ, –¥–∞—Ä–∏–º –≤–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É: <code>{promo_code}</code> üéÅ\n\n"
        f"–û–Ω —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥–µ—Ç –≤–∞—Å –≤ –∫–æ—Ä–∑–∏–Ω–µ!"
    )
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É, –≤–µ–¥—É—â—É—é –≤ –∫–∞—Ç–∞–ª–æ–≥
    builder = InlineKeyboardBuilder()
    builder.button(text="üõçÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥", web_app=WebAppInfo(url=settings.MINI_APP_URL))
    
async def send_reactivation_notification(db: Session, user: User, promo_code: str):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è "—Å–ø—è—â–µ–≥–æ" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    message = (
        f"üëã –î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å, {user.first_name or '–¥—Ä—É–≥'}!\n\n"
        f"–ú—ã —Å–æ—Å–∫—É—á–∏–ª–∏—Å—å –∏ —Ö–æ—Ç–∏–º –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å –≤–∞—Å! –î–∞—Ä–∏–º –≤–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É: <code>{promo_code}</code> üéÅ\n\n"
        f"–ó–∞–≥–ª—è–¥—ã–≤–∞–π—Ç–µ –≤ –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥, —É –Ω–∞—Å –º–Ω–æ–≥–æ –Ω–æ–≤–∏–Ω–æ–∫!"
    )
    builder = InlineKeyboardBuilder()
    builder.button(text="üõçÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥", web_app=WebAppInfo(url=settings.MINI_APP_URL))
    