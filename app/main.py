# app/main.py

import asyncio
import os
import traceback
import logging
from contextlib import asynccontextmanager
from filelock import FileLock, Timeout
from fastapi import APIRouter, FastAPI, Request
from fastapi.responses import JSONResponse
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
from app.core.config import settings as config
from app.core.logging_config import setup_logging

# –†–æ—É—Ç–µ—Ä—ã FastAPI
from app.routers import auth, user, catalog, cart, order, admin as admin_router, cms
from app.routers import settings as settings_router
from app.routers import coupon as coupon_router
from app.routers import notification as notification_router
from app.routers.webhooks import wc_router, telegram_router

# –õ–æ–≥–∏–∫–∞ –±–æ—Ç–∞
from app.bot.core import bot, dp
from app.bot.handlers.user import user_router
from app.bot.handlers.admin_dialogs import admin_dialog_router
from app.bot.handlers.admin_actions import admin_actions_router

# –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∏ —Å–µ—Ä–≤–∏—Å—ã
from app.services.user_levels import update_all_user_levels
from app.services.points_expiration import expire_points_task, notify_about_expiring_points_task
from app.services.bot_status_updater import check_inactive_bots_task
from app.services.notification_cleanup import cleanup_old_notifications_task
from app.bot.services import notification as bot_notification_service
from app.services.birthday_greeter import check_birthdays_task

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
logger = logging.getLogger(__name__)
scheduler = AsyncIOScheduler()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ ---
async def unhandled_exception_handler(request: Request, exc: Exception):
    """
    –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π.
    –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞–º.
    """
    logger.critical(f"Unhandled exception for request: {request.method} {request.url}", exc_info=True)
    
    error_details = "".join(traceback.format_exception(exc))
    
    request_info = (
        f"<b>URL:</b> <code>{request.method} {request.url}</code>\n"
        f"<b>Client:</b> <code>{request.client.host}:{request.client.port}</code>"
    )
    
    error_message = (
        f"üö® <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ API!</b>\n\n"
        f"{request_info}\n\n"
        f"<b>Traceback:</b>\n<pre>{error_details}</pre>"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç
    asyncio.create_task(
        bot_notification_service.send_error_to_super_admins(error_message)
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç 500
    return JSONResponse(
        status_code=500,
        content={"detail": "Internal Server Error. The administrator has been notified."},
    )

# --- Lifespan Manager (–∑–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è) ---
@asynccontextmanager
async def lifespan(app: FastAPI):
    # --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø (–¥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏) ---
    setup_logging()
    logger.info("Application lifespan startup...")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏. –û–Ω –±—É–¥–µ—Ç –ª–µ–∂–∞—Ç—å –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞.
    lock_file = "app_startup.lock"
    lock = FileLock(lock_file)

    try:
        # --- –ë–õ–û–ö–ò–†–û–í–ö–ê ---
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º –≤ 1 —Å–µ–∫—É–Ω–¥—É.
        # –ü–µ—Ä–≤—ã–π –≤–æ—Ä–∫–µ—Ä –∑–∞—Ö–≤–∞—Ç–∏—Ç –µ–µ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç Timeout.
        with lock.acquire(timeout=1):
            logger.info("Lock acquired by this worker. Running initial setup...")
            
            # --- –ö–û–î, –ö–û–¢–û–†–´–ô –í–´–ü–û–õ–ù–ò–¢ –¢–û–õ–¨–ö–û –û–î–ò–ù –í–û–†–ö–ï–† ---
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤ aiogram
            dp.include_router(admin_dialog_router)
            dp.include_router(admin_actions_router)
            dp.include_router(user_router)
            logger.info("Aiogram routers included.")
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±-—Ö—É–∫–∞
            webhook_url = f"{config.BASE_WEBHOOK_URL}{config.TELEGRAM_WEBHOOK_PATH}"
            await bot.set_webhook(url=webhook_url, secret_token=config.TELEGRAM_WEBHOOK_SECRET)
            logger.info(f"Telegram webhook set to: {webhook_url}")
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            if not scheduler.running: # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
                scheduler.add_job(update_all_user_levels, 'cron', hour=3, minute=0, timezone='Europe/Moscow')
                scheduler.add_job(expire_points_task, 'cron', hour=4, minute=0, timezone='Europe/Moscow')
                scheduler.add_job(notify_about_expiring_points_task, 'cron', hour=10, minute=0, timezone='Europe/Moscow')
                scheduler.add_job(check_inactive_bots_task, 'cron', hour=5, minute=0, timezone='Europe/Moscow')
                scheduler.add_job(cleanup_old_notifications_task, 'cron', hour=5, minute=30, timezone='Europe/Moscow')
                scheduler.add_job(check_birthdays_task, 'cron', hour=9, minute=0, timezone='Europe/Moscow')
                scheduler.start()
                logger.info("Scheduler started with background jobs.")
            # ----------------------------------------------------

    except Timeout:
        # –≠—Ç–æ—Ç –∫–æ–¥ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –≤–æ—Ä–∫–µ—Ä–∞–º–∏
        logger.info("Could not acquire lock. Skipping initial setup for this worker.")
        
    yield
    
    # --- –ö–æ–¥ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ (–º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤—Å–µ–º–∏, —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ) ---
    logger.info("Application shutdown...")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
    if scheduler.running:
        scheduler.shutdown()
        logger.info("Scheduler shut down.")
    
    # –£–¥–∞–ª—è–µ–º –≤–µ–±-—Ö—É–∫ (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞–ª –æ–¥–∏–Ω –ø—Ä–æ—Ü–µ—Å—Å, –Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –≤—ã–∑–æ–≤—ã –±–µ–∑–æ–ø–∞—Å–Ω—ã)
    await bot.delete_webhook()
    logger.info("Telegram webhook deleted.")
    
    # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ —Ö–æ—Ä–æ—à–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞)
    if os.path.exists(lock_file):
        os.remove(lock_file)

# --- –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
app = FastAPI(
    title="Telegram Mini App Service",
    description="Backend for Frontend service for Telegram e-commerce app",
    version="0.1.0",
    lifespan=lifespan
)

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π ---
app.add_exception_handler(Exception, unhandled_exception_handler)

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤ FastAPI ---
# –°–æ–∑–¥–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è API
api_router = APIRouter(prefix="/api/v1")

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏ –ø—É–±–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
api_router.include_router(auth.router, tags=["Authentication"])
api_router.include_router(user.router, tags=["Users"])
api_router.include_router(catalog.router, tags=["Catalog"])
api_router.include_router(cart.router, tags=["Cart & Favorites"])
api_router.include_router(order.router, tags=["Orders"])
api_router.include_router(settings_router.router, tags=["Settings"])
api_router.include_router(coupon_router.router, tags=["Coupons"])
api_router.include_router(notification_router.router, tags=["Notifications"])
api_router.include_router(cms.router, tags=["CMS"]) # <-- –ü–µ—Ä–µ–Ω–µ—Å–ª–∏ —Å—é–¥–∞

# –ê–¥–º–∏–Ω—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
api_router.include_router(admin_router.router, prefix="/admin", tags=["Admin"])


# –ü–æ–¥–∫–ª—é—á–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
app.include_router(api_router)

# –í–µ–±-—Ö—É–∫–∏ (–æ—Å—Ç–∞—é—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ)
app.include_router(telegram_router, tags=["Telegram Bot"])
app.include_router(wc_router, prefix="/internal/webhooks", tags=["Internal Webhooks"])