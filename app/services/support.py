# app/services/support.py

import math
import logging
from sqlalchemy.orm import Session
from fastapi import HTTPException, status

# --- –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –ò–ú–ü–û–†–¢–´ ---
from app.core.config import settings
from app.bot.core import bot
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
# ---------------------------

from app.crud import dialogue as crud_dialogue
from app.models.user import User
from app.schemas.admin import (
    DialogueListItem, PaginatedAdminDialogues, DialogueDetails, DialogueUser, DialogueMessageItem
)
from app.bot.services import notification as bot_notification_service
from app.bot.utils.user_display import get_display_name
from app.clients.woocommerce import wc_client

logger = logging.getLogger(__name__)

async def get_paginated_dialogues(
    db: Session, 
    page: int, 
    size: int, 
    status: str | None
) -> PaginatedAdminDialogues:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
    """
    skip = (page - 1) * size
    
    dialogues_db = crud_dialogue.get_dialogues(db, skip=skip, limit=size, status=status)
    total_items = crud_dialogue.count_dialogues(db, status=status)
    total_pages = math.ceil(total_items / size) if total_items > 0 else 1

    items = []
    for dialogue in dialogues_db:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∏–º—è –∏–∑ WooCommerce –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        try:
            wc_user_data = (await wc_client.get(f"wc/v3/customers/{dialogue.user.wordpress_id}")).json()
            display_name = get_display_name(wc_user_data, dialogue.user)
        except Exception:
            display_name = dialogue.user.username or f"ID {dialogue.user.telegram_id}"

        items.append(DialogueListItem(
            id=dialogue.id,
            status=dialogue.status,
            last_message_at=dialogue.last_message_at,
            last_message_snippet=dialogue.last_message_snippet,
            user=DialogueUser(
                id=dialogue.user.id,
                telegram_id=dialogue.user.telegram_id,
                display_name=display_name
            )
        ))

    return PaginatedAdminDialogues(
        total_items=total_items,
        total_pages=total_pages,
        current_page=page,
        size=size,
        items=items
    )

async def get_dialogue_details(db: Session, dialogue_id: int) -> DialogueDetails:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–ª–æ–≥–µ, –≤–∫–ª—é—á–∞—è –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    dialogue = crud_dialogue.get_dialogue_by_id(db, dialogue_id)
    if not dialogue:
        raise HTTPException(status_code=404, detail="Dialogue not found")
        
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    try:
        wc_user_data = (await wc_client.get(f"wc/v3/customers/{dialogue.user.wordpress_id}")).json()
        user_display_name = get_display_name(wc_user_data, dialogue.user)
    except Exception:
        user_display_name = dialogue.user.username or f"ID {dialogue.user.telegram_id}"
    
    dialogue_user = DialogueUser(
        id=dialogue.user.id,
        telegram_id=dialogue.user.telegram_id,
        display_name=user_display_name
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –æ–±–æ–≥–∞—â–∞—è –∏—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
    message_items = []
    for msg in sorted(dialogue.messages, key=lambda m: m.created_at): # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        sender_user = db.get(User, msg.sender_id)
        if sender_user:
            sender_display_name = f"Admin ID {sender_user.id}" # –ò–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if msg.sender_type == 'admin':
                try:
                    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –µ—Å—Ç—å –≤ WC, –±–µ—Ä–µ–º –∏–º—è –æ—Ç—Ç—É–¥–∞
                    wc_sender_data = (await wc_client.get(f"wc/v3/customers/{sender_user.wordpress_id}")).json()
                    sender_display_name = get_display_name(wc_sender_data, sender_user)
                except Exception:
                    # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∏–º—è –∏–∑ Telegram
                    sender_display_name = sender_user.first_name or sender_user.username or f"Admin ID {sender_user.id}"
            else: # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - user
                sender_display_name = user_display_name
            
            sender_info = DialogueUser(
                id=sender_user.id,
                telegram_id=sender_user.telegram_id,
                display_name=sender_display_name
            )
            
            message_items.append(DialogueMessageItem(
                id=msg.id,
                sender_type=msg.sender_type,
                sender=sender_info,
                text=msg.text,
                media_type=msg.media_type,
                media_url=msg.media_url,
                file_name=msg.file_name,
                created_at=msg.created_at
            ))
            
    return DialogueDetails(
        id=dialogue.id,
        status=dialogue.status,
        user=dialogue_user,
        messages=message_items
    )

async def reply_to_dialogue(db: Session, dialogue_id: int, admin_user: User, text: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –¥–∏–∞–ª–æ–≥.
    """
    dialogue = crud_dialogue.get_dialogue_by_id(db, dialogue_id)
    if not dialogue:
        raise HTTPException(status_code=404, detail="Dialogue not found")
        
    # 1. –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
    crud_dialogue.add_message_to_dialogue(
        db=db,
        dialogue=dialogue,
        sender=admin_user,
        text=text,
        sender_type="admin"
    )
    
    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram
    user_to_reply = dialogue.user
    message_to_send = f"üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:**\n\n{text}"
    
    success, reason = await bot_notification_service._send_message(db, user_to_reply, message_to_send)
    
    if not success:
        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Å–∞–º–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞,
        # –Ω–æ –º—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ–±—â–∏—Ç—å –æ–± —ç—Ç–æ–º –∞–¥–º–∏–Ω—É.
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST, 
            detail=f"Message was saved, but failed to send to user via Telegram: {reason}"
        )

async def request_user_contact(db: Session, dialogue_id: int, admin_user: User):
    """
    –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    dialogue = crud_dialogue.get_dialogue_by_id(db, dialogue_id)
    if not dialogue:
        raise HTTPException(status_code=404, detail="Dialogue not found")
        
    user_to_request = dialogue.user
    
    message_text = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω–µ–¥–∂–µ—Ä {admin_user.first_name or '–ø–æ–¥–¥–µ—Ä–∂–∫–∏'} "
        f"—Ö–æ—Ç–µ–ª –±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, "
        f"—á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
    )
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ UX
    builder = ReplyKeyboardBuilder()
    builder.button(text="üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
    
    try:
        await bot.send_message(
            chat_id=user_to_request.telegram_id,
            text=message_text,
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏—Å—á–µ–∑–Ω–µ—Ç –ø–æ—Å–ª–µ –æ–¥–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
            reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
        )
    except Exception as e:
        logger.error(f"Failed to send contact request to user {user_to_request.id}", exc_info=True)
        raise HTTPException(status_code=500, detail="Failed to send request to user via Telegram.")