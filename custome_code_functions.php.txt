/**
 * Гарантирует, что сессия и корзина WooCommerce инициализированы.
 * Необходимо для работы с корзиной в headless-режиме.
 */
function ensure_wc_session() {
    if ( ! did_action('woocommerce_init') ) {
        // Если хук woocommerce_init еще не сработал, вызываем его
        do_action('woocommerce_init');
    }
    if ( is_null( WC()->session ) ) {
        WC()->session = new WC_Session_Handler();
        WC()->session->init();
    }
    if ( is_null( WC()->customer ) ) {
        WC()->customer = new WC_Customer( get_current_user_id(), true );
    }
    if ( is_null( WC()->cart ) ) {
        WC()->cart = new WC_Cart();
    }
}

// --- НАЧАЛО НАШЕГО КАСТОМНОГО КОДА ---

/**
 * Функция для регистрации нашего кастомного API-контроллера.
 */
function register_headless_api_routes() {
    $controller = new Headless_API_Controller();
    $controller->register_routes();
}
add_action('rest_api_init', 'register_headless_api_routes');

/**
 * Класс для создания кастомных REST API эндпоинтов для headless-магазина.
 */
class Headless_API_Controller extends WP_REST_Controller {

    protected $namespace = 'headless-api/v1';

    public function register_routes() {
        register_rest_route($this->namespace, '/orders', array(
            array(
                'methods'             => WP_REST_Server::CREATABLE,
                'callback'            => array($this, 'create_order'),
                'permission_callback' => '__return_true',
            ),
        ));
    register_rest_route($this->namespace, '/settings', array(
        array(
            'methods'             => WP_REST_Server::EDITABLE, // Это 'POST', 'PUT', 'PATCH'
            'callback'            => array($this, 'update_settings'),
            'permission_callback' => '__return_true', // Защищено паролем приложения
        ),
    ));

      register_rest_route($this->namespace, '/coupons/validate', array(
        array(
            'methods'             => WP_REST_Server::CREATABLE, // POST
            'callback'            => array($this, 'validate_coupon'),
            'permission_callback' => '__return_true',
        ),
    ));

    }

// functions.php, в классе Headless_API_Controller

public function validate_coupon($request) {
    $params = $request->get_json_params();
    $coupon_code = isset($params['coupon_code']) ? wc_clean(wp_unslash($params['coupon_code'])) : '';
    $line_items = isset($params['line_items']) ? $params['line_items'] : [];
    $customer_id = isset($params['customer_id']) ? absint($params['customer_id']) : 0;

    $log_marker = '[COUPON_VALIDATION]'; // Маркер для поиска в логах

    error_log("{$log_marker} --- Start ---");
    error_log("{$log_marker} Coupon Code: '{$coupon_code}', Customer ID: {$customer_id}");
    error_log("{$log_marker} Line Items Received: " . json_encode($line_items));

    if (empty($coupon_code)) {
        return new WP_Error('bad_request', 'Coupon code is required.', array('status' => 400));
    }

    $coupon = new WC_Coupon($coupon_code);
    if (!$coupon->get_id()) {
        error_log("{$log_marker} Result: Coupon with code '{$coupon_code}' not found.");
        return new WP_Error('invalid_coupon_code', 'Промокод не найден.', array('status' => 404));
    }
    error_log("{$log_marker} Coupon object created successfully. Type: {$coupon->get_discount_type()}, Amount: {$coupon->get_amount()}");

    // --- ЛОГИКА С ВРЕМЕННЫМ ЗАКАЗОМ ---
    $temp_order = null;
    try {
        // 1. Создаем временный заказ
        $temp_order = wc_create_order([
            'status' => 'checkout-draft',
            'customer_id' => $customer_id,
        ]);

        if (is_wp_error($temp_order)) {
            throw new Exception('Could not create temporary order object.');
        }
        error_log("{$log_marker} Temporary order created with ID: " . $temp_order->get_id());

        // 2. Наполняем его товарами
        if(empty($line_items)) {
            throw new Exception('Line items are required for validation.');
        }
        foreach ($line_items as $item) {
            $product = wc_get_product(absint($item['product_id']));
            if ($product) {
                $temp_order->add_product($product, absint($item['quantity']));
            }
        }
        $temp_order->calculate_totals(); // Рассчитываем сумму ДО применения купона
        error_log("{$log_marker} Temporary order filled. Subtotal: " . $temp_order->get_subtotal());

        // 3. Пытаемся применить купон. Это самый надежный метод валидации.
        $apply_result = $temp_order->apply_coupon($coupon_code);
        error_log("{$log_marker} apply_coupon('{$coupon_code}') result: " . json_encode($apply_result));

        if (is_wp_error($apply_result)) {
            // Если apply_coupon вернул объект ошибки
            throw new Exception($apply_result->get_error_message());
        }
        if ($apply_result === false) {
             // Если вернулся просто false
            throw new Exception('Промокод не применим к товарам в вашей корзине.');
        }

        // 4. Пересчитываем итоги и получаем скидку
        $temp_order->calculate_totals();
        $discount_amount = $temp_order->get_discount_total();
        error_log("{$log_marker} Totals recalculated. Final discount amount: {$discount_amount}");

        // 5. Обязательно удаляем временный заказ
        wp_delete_post($temp_order->get_id(), true);
        error_log("{$log_marker} Temporary order " . $temp_order->get_id() . " deleted.");
        $temp_order = null; // Обнуляем, чтобы не удалить дважды в блоке finally

    } catch (Exception $e) {
        $error_message = $e->getMessage();
        error_log("{$log_marker} ERROR: {$error_message}");
        // Если на любом этапе произошла ошибка, убеждаемся, что временный заказ удален
        if ($temp_order && $temp_order->get_id()) {
            wp_delete_post($temp_order->get_id(), true);
            error_log("{$log_marker} Temporary order " . $temp_order->get_id() . " deleted due to an error.");
        }
        return new WP_Error('coupon_not_applicable', $error_message, array('status' => 400));
    }
    // ------------------------------------
    
    $response_data = [
        'code' => $coupon->get_code(),
        'amount' => $coupon->get_amount(),
        'discount_type' => $coupon->get_discount_type(),
        'description' => $coupon->get_description(),
        'discount_amount' => round((float)$discount_amount, 2)
    ];
    
    error_log("{$log_marker} --- Success. Returning data: " . json_encode($response_data) . " ---");
    return new WP_REST_Response($response_data, 200);
}

/**
 * Обновляет поля ACF на странице настроек.
 */
public function update_settings($request) {
    // ID нашей страницы настроек
    $settings_page_id = 329; // <-- ЗАМЕНИТЕ НА ВАШ ID
    
    $params = $request->get_json_params();
    $updated_fields = [];

    // Обновляем только те поля, которые были переданы
    if (isset($params['welcome_bonus_amount'])) {
        update_field('welcome_bonus_amount', (int)$params['welcome_bonus_amount'], $settings_page_id);
        $updated_fields[] = 'welcome_bonus_amount';
    }
    if (isset($params['is_welcome_bonus_active'])) {
        update_field('is_welcome_bonus_active', (bool)$params['is_welcome_bonus_active'], $settings_page_id);
        $updated_fields[] = 'is_welcome_bonus_active';
    }

    if (empty($updated_fields)) {
        return new WP_Error('bad_request', 'No valid fields to update.', array('status' => 400));
    }

    // Сбрасываем кеш настроек в FastAPI (через веб-хук)
    // Это продвинутый шаг, пока можно обойтись TTL

    return new WP_REST_Response(['status' => 'ok', 'updated' => $updated_fields], 200);
}

    /**
     * Основная логика создания заказа.
     */
    public function create_order($request) {
        $params = $request->get_json_params();

        if (empty($params['customer_id']) || empty($params['line_items']) || empty($params['payment_method_id'])) {
            return new WP_Error('bad_request', 'Customer ID, line items, and payment_method_id are required.', array('status' => 400));
        }

        try {
            $order = new WC_Order();
            $order->set_customer_id(absint($params['customer_id']));

            foreach ($params['line_items'] as $item) {
                $product = wc_get_product(absint($item['product_id']));
                if ($product) {
                    $order->add_product($product, absint($item['quantity']));
                }
            }

            if (!empty($params['billing'])) {
                $order->set_address($params['billing'], 'billing');
            }
            if (!empty($params['shipping'])) {
                $order->set_address($params['shipping'], 'shipping');
            }

            $payment_method_id = sanitize_text_field($params['payment_method_id']);
            $payment_gateways = WC()->payment_gateways->payment_gateways();
            if (isset($payment_gateways[$payment_method_id])) {
                $order->set_payment_method($payment_gateways[$payment_method_id]);
            } else {
                return new WP_Error('invalid_payment_method', 'Invalid payment method specified.', array('status' => 400));
            }
            
            $coupon_code = isset($params['coupon_code']) ? sanitize_text_field($params['coupon_code']) : null;
            if (!empty($coupon_code)) {
                $result = $order->apply_coupon($coupon_code);
                if (is_wp_error($result)) {
                    return new WP_Error('invalid_coupon', $result->get_error_message(), array('status' => 400));
                }
            }
            
            $points_to_spend = isset($params['points_to_spend']) ? absint($params['points_to_spend']) : 0;
            if ($points_to_spend > 0) {
                $coupon_code = 'POINTS_' . time() . '_' . $params['customer_id'];
                $coupon = new WC_Coupon();
                $coupon->set_code($coupon_code);
                $coupon->set_discount_type('fixed_cart');
                // --- ИСПРАВЛЕНИЕ ЗДЕСЬ ---
                $coupon->set_amount($points_to_spend);
                // -------------------------
                $coupon->set_individual_use(true);
                $coupon->set_usage_limit(1);
                $coupon->save();
                $order->apply_coupon($coupon_code);
            }

            $order->calculate_totals();
            $order_id = $order->save();

            if (is_wp_error($order_id)) {
                return $order_id;
            }

            $direct_payment_url = '';
            $order_status = 'pending';

            if ($payment_method_id === 'robokassa') {
                $order_status = 'pending';
                
                $robokassa_settings = get_option('woocommerce_robokassa_settings');
                $merchant_login = $robokassa_settings['merchant_login'];
                $password_1 = $robokassa_settings['password_1'];
                $order_total = $order->get_total();
                $order_description = "Оплата заказа №" . $order->get_order_number();
                
                $signature_value = "{$merchant_login}:{$order_total}:{$order_id}:{$password_1}";
                $crc = md5($signature_value);

                $payment_base_url = 'https://auth.robokassa.ru/Merchant/Index.aspx';
                $payment_url_params = http_build_query([
                    'MerchantLogin' => $merchant_login, 'OutSum' => $order_total,
                    'InvId' => $order_id, 'Description' => $order_description,
                    'SignatureValue' => $crc,
                ]);
                $direct_payment_url = $payment_base_url . '?' . $payment_url_params;

            } elseif ($payment_method_id === 'cod') {
                $order_status = 'on-hold';
                $direct_payment_url = '';
            }
            
            $order->update_status($order_status, 'Заказ создан через Headless API.');
            $order->save();
            
            $data = $this->prepare_order_data_for_response($order);
            $data['payment_url'] = $direct_payment_url;
            
            return new WP_REST_Response($data, 201);

        } catch (Exception $e) {
            return new WP_Error('order_creation_failed', $e->getMessage(), array('status' => 500));
        }
    }

    /**
     * Вспомогательная функция для ручной сборки ответа.
     */
    private function prepare_order_data_for_response($order) {
        $line_items_data = [];
        foreach ($order->get_items() as $item) {
            $line_items_data[] = [
                'product_id' => $item->get_product_id(),
                'name'       => $item->get_name(),
                'quantity'   => $item->get_quantity(),
                'price'      => (string) ($item->get_total() / $item->get_quantity()),
                'total'      => (string) $item->get_total(),
            ];
        }

        $billing_address = $order->get_address('billing');
    
    // Если имя или фамилия в адресе пустые, пытаемся "подтянуть" их
    // из основного профиля пользователя.
    if (empty($billing_address['first_name']) && $order->get_customer_id()) {
        $billing_address['first_name'] = get_user_meta($order->get_customer_id(), 'first_name', true);
    }
    if (empty($billing_address['last_name']) && $order->get_customer_id()) {
        $billing_address['last_name'] = get_user_meta($order->get_customer_id(), 'last_name', true);
    }
    // -------------------------
     $customer_id = $order->get_customer_id();
    $telegram_id = null;
    if ($customer_id) {
        // Предполагаем, что мы сохраняем telegram_id в мета-поле 'telegram_id'
        // Если вы его не сохраняете, его можно взять из email'а, который мы генерируем
        $telegram_id_meta = get_user_meta($customer_id, 'telegram_id', true);
        if (!empty($telegram_id_meta)) {
            $telegram_id = (int)$telegram_id_meta;
        } else {
            // Пытаемся извлечь из email'а как запасной вариант
            $email = $order->get_billing_email();
            if (strpos($email, '@telegram.user') !== false) {
                $telegram_id = (int)str_replace('@telegram.user', '', $email);
            }
        }
    }
    return [
        'id'                   => $order->get_id(),
        'number'               => $order->get_order_number(),
        'status'               => $order->get_status(),
        'date_created'         => wc_rest_prepare_date_response($order->get_date_created()),
        'total'                => (string) $order->get_total(),
        'payment_method_title' => $order->get_payment_method_title(),
        'billing'              => $billing_address, // <-- Используем дополненный адрес
        'line_items'           => $line_items_data,
        'customer_telegram_id' => $telegram_id // <-- Новое поле в ответе

    ];
}}



/**
 * Отправляет веб-хук в FastAPI сервис при публикации
 * или обновлении записи типа 'promo' (Акция).
 */
function trigger_promo_webhook_on_publish($post_id, $post, $update) {
    // Убеждаемся, что это тип записи 'promo' и статус 'publish'
    if ($post->post_type !== 'promo' || $post->post_status !== 'publish') {
        return;
    }

    // `!$update` означает, что это первая публикация, а не обновление.
    // Вы можете решить, отправлять ли хук только при первой публикации
    // или при каждом обновлении. Давайте отправлять при каждом.
    // if ($update === false) { // Раскомментируйте, если нужно только при создании

    // URL нашего FastAPI эндпоинта
    $webhook_url = 'https://api.app.ttfg.ru/internal/webhooks/promo-created'; // <-- ЗАМЕНИТЕ НА ВАШ URL
    
    // Секрет для аутентификации (опционально, но рекомендуется)
    $secret = '5d2f20ec6eda4990cd61739ef81647e0e7e6b27ba877bd0881016ff5c11b39f6'; // <-- ЗАМЕНИТЕ НА СВОЙ СЕКРЕТ

    $body = json_encode(['promo_id' => $post_id]);

    $args = array(
        'body'        => $body,
        'headers'     => array(
            'Content-Type' => 'application/json',
            'X-Webhook-Secret' => $secret // Кастомный заголовок для проверки
        ),
        'timeout'     => 15,
        'redirection' => 5,
        'blocking'    => false, // <-- Очень важно! Делаем запрос неблокирующим
        'httpversion' => '1.0',
        'sslverify'   => true, // Оставьте true для продакшена
        'data_format' => 'body',
    );

    // Отправляем запрос
    $response = wp_remote_post($webhook_url, $args);

    // Логирование для отладки (можно посмотреть в error_log вашего сервера)
    if (is_wp_error($response)) {
        error_log('Promo Webhook Error: ' . $response->get_error_message());
    } else {
        error_log('Promo Webhook Sent Successfully for promo ID: ' . $post_id);
    }
    
    // } // Закрывающая скобка для if ($update === false)
}

// "Вешаемся" на хук, который срабатывает при сохранении любого поста/страницы/cpt
// 10 - приоритет, 3 - количество аргументов, которые мы хотим получить
add_action('save_post', 'trigger_promo_webhook_on_publish', 10, 3);


/**
 * Регистрирует новое событие в WP-Cron, если оно еще не запланировано.
 */
if (!wp_next_scheduled('cleanup_draft_orders_event')) {
    // Запускать каждый час
    wp_schedule_event(time(), 'hourly', 'cleanup_draft_orders_event');
}

/**
 * Привязывает нашу функцию очистки к этому событию.
 */
add_action('cleanup_draft_orders_event', 'cleanup_old_draft_orders');

/**
 * Основная функция, которая находит и удаляет старые заказы-черновики.
 */
function cleanup_old_draft_orders() {
    error_log('[CLEANUP_DRAFTS] Starting cleanup of old draft orders...');

    // Ищем заказы со статусом 'checkout-draft'
    $args = array(
        'post_type'   => 'shop_order',
        'post_status' => 'wc-checkout-draft',
        'posts_per_page' => 100, // Обрабатываем до 100 за раз
        'date_query'  => array(
            array(
                // Которые были созданы более 1 часа назад
                'before' => '1 hour ago',
                'inclusive' => true,
            ),
        ),
        'fields' => 'ids', // Получаем только ID для производительности
    );

    $draft_orders_query = new WP_Query($args);

    if ($draft_orders_query->have_posts()) {
        $deleted_count = 0;
        foreach ($draft_orders_query->posts as $order_id) {
            // Удаляем безвозвратно, минуя корзину
            $deleted = wp_delete_post($order_id, true);
            if ($deleted) {
                $deleted_count++;
            }
        }
        error_log("[CLEANUP_DRAFTS] Deleted {$deleted_count} old draft orders.");
    } else {
        error_log('[CLEANUP_DRAFTS] No old draft orders found to delete.');
    }
}

/**
 * Исключает заказы со статусом 'checkout-draft' из всех
 * ответов WooCommerce REST API для эндпоинта /orders.
 * Это самый надежный способ.
 */
function exclude_draft_orders_from_rest_api($args, $request) {
    // Получаем все существующие `tax_query`
    $tax_query = isset($args['tax_query']) ? $args['tax_query'] : array();

    // Добавляем наше условие: статус НЕ должен быть 'checkout-draft'
    $tax_query[] = array(
        'taxonomy' => 'shop_order_status',
        'field'    => 'slug',
        'terms'    => array('checkout-draft'),
        'operator' => 'NOT IN',
    );

    $args['tax_query'] = $tax_query;

    return $args;
}
add_filter('woocommerce_rest_order_query', 'exclude_draft_orders_from_rest_api', 10, 2);

/**
 * "Обогащает" REST API ответ для кастомных типов записей.
 * Заменяет ID медиафайлов из полей ACF на их полные URL.
 */
function enrich_media_rest_response($response, $post, $request) {
    // Проверяем, есть ли у ответа ключ 'acf'
    if (isset($response->data['acf'])) {

        // --- Обрабатываем поля для Баннеров ---
        $image_id_banner = $response->data['acf']['banner_image'];
        if (!empty($image_id_banner) && is_numeric($image_id_banner)) {
            $response->data['acf']['banner_image'] = wp_get_attachment_url($image_id_banner);
        }
        $video_id_banner = $response->data['acf']['banner_video'];
        if (!empty($video_id_banner) && is_numeric($video_id_banner)) {
            $response->data['acf']['banner_video'] = wp_get_attachment_url($video_id_banner);
        }

        // --- Обрабатываем поля для Сторисов ---
        $image_id_story = $response->data['acf']['story_image'];
        if (!empty($image_id_story) && is_numeric($image_id_story)) {
            $response->data['acf']['story_image'] = wp_get_attachment_url($image_id_story);
        }
        $video_id_story = $response->data['acf']['story_video'];
        if (!empty($video_id_story) && is_numeric($video_id_story)) {
            $response->data['acf']['story_video'] = wp_get_attachment_url($video_id_story);
        }
        $image_id_promo = $response->data['acf']['promo_image']; // <-- Имя поля должно быть promo_image
    if (!empty($image_id_promo) && is_numeric($image_id_promo)) {
        $response->data['acf']['promo_image'] = wp_get_attachment_url($image_id_promo);
    }
    }

    return $response;
}

// "Вешаемся" на хуки для обоих типов записей
add_filter('rest_prepare_banner', 'enrich_media_rest_response', 10, 3);
add_filter('rest_prepare_story', 'enrich_media_rest_response', 10, 3); 
add_filter('rest_prepare_promo', 'enrich_media_rest_response', 10, 3);
