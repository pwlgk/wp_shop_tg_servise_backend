# scripts/analyze_data.py

import csv
import logging
from collections import defaultdict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

USERS_CSV_PATH = 'users.csv'
ORDERS_CSV_PATH = 'orders.csv'

def analyze_data():
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç CSV-–¥–∞–º–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∑–∞–∫–∞–∑–æ–≤ –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
    """
    logger.info("--- Starting Data Analysis ---")

    # --- 1. –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
    users = {}
    total_users = 0
    with open(USERS_CSV_PATH, mode='r', encoding='utf-8-sig') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            user_id = int(row.get('ID') or row.get('user_id', 0))
            if user_id > 0:
                users[user_id] = {
                    'display_name': row.get('display_name', 'N/A'),
                    'email': row.get('user_email', 'N/A')
                }
                total_users += 1
    logger.info(f"Found {total_users} unique users in users.csv.")

    # --- 2. –ê–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑–æ–≤ ---
    total_orders = 0
    total_sales_all_time = 0.0
    order_status_counts = defaultdict(int)
    customer_spending = defaultdict(lambda: {'total_spent': 0.0, 'order_count': 0})
    
    with open(ORDERS_CSV_PATH, mode='r', encoding='utf-8-sig') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            total_orders += 1
            status = row.get('status', 'unknown')
            order_total_str = row.get('order_total', '0')
            customer_id_str = row.get('customer_id', '0')

            try:
                order_total = float(order_total_str)
                customer_id = int(customer_id_str)
            except (ValueError, TypeError):
                logger.warning(f"Skipping order row due to invalid data: {row}")
                continue

            order_status_counts[status] += 1
            
            # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –ø—Ä–æ–¥–∞–∂ —Ç–æ–ª—å–∫–æ –ø–æ "—É—Å–ø–µ—à–Ω—ã–º" —Å—Ç–∞—Ç—É—Å–∞–º
            if status in ['completed', 'processing']:
                total_sales_all_time += order_total

            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º, —Ç–æ–ª—å–∫–æ –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∑–∞–∫–∞–∑–∞–º
            if status == 'completed' and customer_id > 0:
                customer_spending[customer_id]['total_spent'] += order_total
                customer_spending[customer_id]['order_count'] += 1

    # --- 3. –í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞ ---
    print("\n" + "="*50)
    print(" " * 15 + "–ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–ï–¢")
    print("="*50 + "\n")

    print(f"üë§ **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º**")
    print(f"   - –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
    customers_with_purchases = len(customer_spending)
    customers_without_purchases = total_users - customers_with_purchases
    print(f"   - –ö–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø–æ–∫—É–ø–∫–∞–º–∏ (—Ö–æ—Ç—è –±—ã 1 –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑): {customers_with_purchases}")
    if total_users > 0:
        conversion_rate = (customers_with_purchases / total_users) * 100
        print(f"   - –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {conversion_rate:.2f}%")
    print(f"   - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö, –Ω–æ –±–µ–∑ –ø–æ–∫—É–ø–æ–∫: {customers_without_purchases}")

    print("\n" + "-"*50 + "\n")

    print(f"üì¶ **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º**")
    print(f"   - –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ (–≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã): {total_orders}")
    print(f"   - –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂ (—Å—Ç–∞—Ç—É—Å—ã 'completed', 'processing'): {total_sales_all_time:,.2f} RUB")
    if total_orders > 0:
        avg_order_value = total_sales_all_time / (order_status_counts.get('completed', 0) + order_status_counts.get('processing', 0)) if (order_status_counts.get('completed', 0) + order_status_counts.get('processing', 0)) > 0 else 0
        print(f"   - –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_order_value:,.2f} RUB")
    
    print("\nüìà **–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:**")
    for status, count in sorted(order_status_counts.items(), key=lambda item: item[1], reverse=True):
        print(f"   - {status.capitalize():<15}: {count} —à—Ç.")

    print("\n" + "-"*50 + "\n")
    
    print("üèÜ **–¢–æ–ø-10 –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ (—Ç–æ–ª—å–∫–æ 'completed')**")
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Å—É–º–º–µ –ø–æ–∫—É–ø–æ–∫
    sorted_customers = sorted(customer_spending.items(), key=lambda item: item[1]['total_spent'], reverse=True)
    
    if not sorted_customers:
        print("   - –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞—Ö.")
    else:
        print(f"{'ID –ö–ª–∏–µ–Ω—Ç–∞':<12} | {'–ò–º—è / Email':<35} | {'–°—É–º–º–∞ –≤—ã–∫—É–ø–∞':<15} | {'–ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤':<15}")
        print("-"*80)
        for i, (customer_id, data) in enumerate(sorted_customers[:10]):
            user_info = users.get(customer_id, {'display_name': '–ù–µ –Ω–∞–π–¥–µ–Ω', 'email': 'N/A'})
            display_name = user_info.get('display_name') or user_info.get('email')
            # –û–±—Ä–µ–∑–∞–µ–º –∏–º—è, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            if len(display_name) > 33:
                display_name = display_name[:30] + '...'
            
            total_spent_str = f"{data['total_spent']:,.2f} RUB"
            print(f"{customer_id:<12} | {display_name:<35} | {total_spent_str:<15} | {data['order_count']:<15}")
            
    print("\n" + "="*50)
    print(" " * 18 + "–ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
    print("="*50 + "\n")


if __name__ == "__main__":
    try:
        analyze_data()
    except FileNotFoundError as e:
        logger.error(f"–û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ '{e.filename}' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞.")
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)