# scripts/analyze_orders_only.py

import csv
import logging
from collections import defaultdict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

ORDERS_CSV_PATH = 'orders.csv'

def analyze_orders():
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç CSV-–¥–∞–º–ø –∑–∞–∫–∞–∑–æ–≤ –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º.
    """
    logger.info("--- Starting Order-Only Analysis ---")

    # --- –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö ---
    total_orders = 0
    total_sales = 0.0
    successful_orders_count = 0
    order_status_counts = defaultdict(int)
    customer_identifiers = set() # –î–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    product_sales = defaultdict(lambda: {'name': '', 'quantity': 0, 'total_revenue': 0.0})

    with open(ORDERS_CSV_PATH, mode='r', encoding='utf-8-sig') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            total_orders += 1
            status = row.get('status', 'unknown')
            order_total_str = row.get('order_total', '0')
            customer_id = row.get('customer_id', '0')
            billing_email = row.get('billing_email', '').lower().strip()

            try:
                order_total = float(order_total_str)
            except (ValueError, TypeError):
                logger.warning(f"Skipping order row due to invalid total: {row}")
                continue

            order_status_counts[status] += 1
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            if customer_id and customer_id != '0':
                customer_identifiers.add(f"user_{customer_id}")
            elif billing_email:
                customer_identifiers.add(f"guest_{billing_email}")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂–∏ –∏ —Ç–æ–≤–∞—Ä—ã —Ç–æ–ª—å–∫–æ –≤ "—É—Å–ø–µ—à–Ω—ã—Ö" –∑–∞–∫–∞–∑–∞—Ö
            if status in ['completed', 'processing']:
                total_sales += order_total
                successful_orders_count += 1
                
                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–≤–∞—Ä–∞–º –≤ –∑–∞–∫–∞–∑–µ
                # WooCommerce —ç–∫—Å–ø–æ—Ä—Ç –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –¥–æ 21 line_item
                for i in range(1, 22):
                    product_name = row.get(f'Product Item {i} Name')
                    if not product_name:
                        break # –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å

                    try:
                        product_id = int(row.get(f'Product Item {i} id', 0))
                        quantity = int(row.get(f'Product Item {i} Quantity', 0))
                        total = float(row.get(f'Product Item {i} Total', 0.0))
                        
                        if product_id > 0 and quantity > 0:
                            product_sales[product_id]['name'] = product_name
                            product_sales[product_id]['quantity'] += quantity
                            product_sales[product_id]['total_revenue'] += total

                    except (ValueError, TypeError):
                        continue

    # --- –í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞ ---
    print("\n" + "="*50)
    print(" " * 12 + "–û–¢–ß–ï–¢ –ü–û –ê–ù–ê–õ–ò–ó–£ –ó–ê–ö–ê–ó–û–í")
    print("="*50 + "\n")

    print("üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**")
    print(f"   - –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ (–≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã): {total_orders}")
    print(f"   - –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π (–≤–∫–ª—é—á–∞—è –≥–æ—Å—Ç–µ–π): {len(customer_identifiers)}")
    print(f"   - –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂ (—Å—Ç–∞—Ç—É—Å—ã 'completed', 'processing'): {total_sales:,.2f} RUB")
    if successful_orders_count > 0:
        avg_order_value = total_sales / successful_orders_count
        print(f"   - –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ —É—Å–ø–µ—à–Ω—ã–º –∑–∞–∫–∞–∑–∞–º: {avg_order_value:,.2f} RUB")

    print("\n" + "-"*50 + "\n")

    print("üìà **–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º**")
    for status, count in sorted(order_status_counts.items(), key=lambda item: item[1], reverse=True):
        print(f"   - {status.capitalize():<15}: {count} —à—Ç.")

    print("\n" + "-"*50 + "\n")

    print("üèÜ **–¢–æ–ø-10 —Å–∞–º—ã—Ö –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É)**")
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü
    sorted_products = sorted(product_sales.items(), key=lambda item: item[1]['quantity'], reverse=True)

    if not sorted_products:
        print("   - –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö.")
    else:
        print(f"{'ID –¢–æ–≤–∞—Ä–∞':<10} | {'–ö–æ–ª-–≤–æ (—à—Ç.)':<12} | {'–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'}")
        print("-"*80)
        for product_id, data in sorted_products[:10]:
            name = data['name']
            if len(name) > 50: # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                name = name[:47] + '...'
            print(f"{product_id:<10} | {data['quantity']:<12} | {name}")

    print("\n" + "="*50)
    print(" " * 18 + "–ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
    print("="*50 + "\n")


if __name__ == "__main__":
    try:
        analyze_orders()
    except FileNotFoundError:
        logger.error(f"–û—à–∏–±–∫–∞: –§–∞–π–ª '{ORDERS_CSV_PATH}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞.")
    except Exception:
        logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", exc_info=True)