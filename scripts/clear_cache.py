# scripts/clear_cache.py

import os
import sys
import redis
from dotenv import load_dotenv

# –•–∞–∫ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –¥—Ä—É–≥–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
# –û–Ω –∏—â–µ—Ç .env —Ñ–∞–π–ª –≤ —Ç–µ–∫—É—â–µ–π –∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
dotenv_path = os.path.join(os.path.dirname(__file__), '..', '.env')
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)
else:
    load_dotenv()


def clear_redis_cache():
    """
    –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Redis, –∏—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞,
    –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """
    print("--- Redis Cache Clear Script ---")

    # 1. –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    redis_host = os.getenv("REDIS_HOST")
    redis_port = os.getenv("REDIS_PORT")

    if not redis_host or not redis_port:
        print("‚ùå ERROR: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ REDIS_HOST –∏ REDIS_PORT –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –≤–∞—à–µ–º .env —Ñ–∞–π–ª–µ.")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.")
        sys.exit(1)

    print(f"‚ÑπÔ∏è  –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis –ø–æ –∞–¥—Ä–µ—Å—É: {redis_host}:{redis_port}")

    try:
        # 2. –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Redis. decode_responses=True –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞.
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç, —Ç–∞–∫ –∫–∞–∫ asyncio –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω.
        r = redis.Redis(host=redis_host, port=int(redis_port), db=0, decode_responses=True)
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã PING
        r.ping()
        print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

        # 4. –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
        keys_count = r.dbsize()
        if keys_count == 0:
            print("‚úÖ –ö–µ—à —É–∂–µ –ø—É—Å—Ç. –î–µ–ª–∞—Ç—å –Ω–µ—á–µ–≥–æ.")
            sys.exit(0)
            
        print(f"üî• –ù–∞–π–¥–µ–Ωo {keys_count} –∫–ª—é—á–µ–π. –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É...")

        # 5. –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É FLUSHDB –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π –≤ —Ç–µ–∫—É—â–µ–π –ë–î
        r.flushdb()
        
        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        final_keys_count = r.dbsize()
        if final_keys_count == 0:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {keys_count} –∫–ª—é—á–µ–π. –ö–µ—à –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω!")
        else:
            print(f"‚ö†Ô∏è  –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í –±–∞–∑–µ –æ—Å—Ç–∞–ª–æ—Å—å {final_keys_count} –∫–ª—é—á–µ–π.")

    except redis.exceptions.ConnectionError as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis.")
        print(f"   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Redis —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É {redis_host}:{redis_port}.")
        print(f"   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {e}")
        sys.exit(1)
    except ValueError:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò: –ó–Ω–∞—á–µ–Ω–∏–µ REDIS_PORT ('{redis_port}') –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    clear_redis_cache()